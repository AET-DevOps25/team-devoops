/*
 * MeetAtMensa
 * This OpenAPI specification defines the endpoints, schemas, and security mechanisms for the Meet@Mensa User micro-service. 
 *
 * The version of the OpenAPI document: 2.2.2
 * Contact: devoops@tyrean.mozmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.time.LocalDate;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import java.util.UUID;
import org.openapitools.client.model.ConversationStarterCollection;
import org.openapitools.client.model.Location;
import org.openapitools.client.model.MatchStatus;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Object representing a group that has been matched in the Meet@Mensa system.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2025-07-19T14:23:43.639048386Z[Etc/UTC]", comments = "Generator version: 7.14.0")
public class Group {
  public static final String SERIALIZED_NAME_GROUP_I_D = "groupID";
  @SerializedName(SERIALIZED_NAME_GROUP_I_D)
  @javax.annotation.Nonnull
  private UUID groupID;

  public static final String SERIALIZED_NAME_DATE = "date";
  @SerializedName(SERIALIZED_NAME_DATE)
  @javax.annotation.Nonnull
  private LocalDate date;

  public static final String SERIALIZED_NAME_TIME = "time";
  @SerializedName(SERIALIZED_NAME_TIME)
  @javax.annotation.Nonnull
  private Integer time;

  public static final String SERIALIZED_NAME_LOCATION = "location";
  @SerializedName(SERIALIZED_NAME_LOCATION)
  @javax.annotation.Nonnull
  private Location location;

  public static final String SERIALIZED_NAME_USER_STATUS = "userStatus";
  @SerializedName(SERIALIZED_NAME_USER_STATUS)
  @javax.annotation.Nonnull
  private List<MatchStatus> userStatus = new ArrayList<>();

  public static final String SERIALIZED_NAME_CONVERSATION_STARTERS = "conversationStarters";
  @SerializedName(SERIALIZED_NAME_CONVERSATION_STARTERS)
  @javax.annotation.Nonnull
  private ConversationStarterCollection conversationStarters;

  public Group() {
  }

  public Group groupID(@javax.annotation.Nonnull UUID groupID) {
    this.groupID = groupID;
    return this;
  }

  /**
   * The unique ID of a Group in the Meet@Mensa system.
   * @return groupID
   */
  @javax.annotation.Nonnull
  public UUID getGroupID() {
    return groupID;
  }

  public void setGroupID(@javax.annotation.Nonnull UUID groupID) {
    this.groupID = groupID;
  }


  public Group date(@javax.annotation.Nonnull LocalDate date) {
    this.date = date;
    return this;
  }

  /**
   * Date the group is scheduled to meet at
   * @return date
   */
  @javax.annotation.Nonnull
  public LocalDate getDate() {
    return date;
  }

  public void setDate(@javax.annotation.Nonnull LocalDate date) {
    this.date = date;
  }


  public Group time(@javax.annotation.Nonnull Integer time) {
    this.time = time;
    return this;
  }

  /**
   * What times a user is available to be matched  Value | Start Time | End Time ---------|----------|--------- | 1     | 10:00      | 10:15    | | 2     | 10:15      | 10:30    | | 3     | 10:30      | 10:45    | | 4     | 10:45      | 11:00    | | 5     | 11:00      | 11:15    | | 6     | 11:15      | 11:30    | | 7     | 11:30      | 11:45    | | 8     | 11:45      | 12:00    | | 9     | 12:00      | 12:15    | | 10    | 12:15      | 12:30    | | 11    | 12:30      | 12:45    | | 12    | 12:45      | 13:00    | | 13    | 13:00      | 13:15    | | 14    | 13:15      | 13:30    | | 15    | 13:30      | 13:45    | | 16    | 13:45      | 14:00    |
   * minimum: 1
   * maximum: 16
   * @return time
   */
  @javax.annotation.Nonnull
  public Integer getTime() {
    return time;
  }

  public void setTime(@javax.annotation.Nonnull Integer time) {
    this.time = time;
  }


  public Group location(@javax.annotation.Nonnull Location location) {
    this.location = location;
    return this;
  }

  /**
   * Get location
   * @return location
   */
  @javax.annotation.Nonnull
  public Location getLocation() {
    return location;
  }

  public void setLocation(@javax.annotation.Nonnull Location location) {
    this.location = location;
  }


  public Group userStatus(@javax.annotation.Nonnull List<MatchStatus> userStatus) {
    this.userStatus = userStatus;
    return this;
  }

  public Group addUserStatusItem(MatchStatus userStatusItem) {
    if (this.userStatus == null) {
      this.userStatus = new ArrayList<>();
    }
    this.userStatus.add(userStatusItem);
    return this;
  }

  /**
   * Get userStatus
   * @return userStatus
   */
  @javax.annotation.Nonnull
  public List<MatchStatus> getUserStatus() {
    return userStatus;
  }

  public void setUserStatus(@javax.annotation.Nonnull List<MatchStatus> userStatus) {
    this.userStatus = userStatus;
  }


  public Group conversationStarters(@javax.annotation.Nonnull ConversationStarterCollection conversationStarters) {
    this.conversationStarters = conversationStarters;
    return this;
  }

  /**
   * Get conversationStarters
   * @return conversationStarters
   */
  @javax.annotation.Nonnull
  public ConversationStarterCollection getConversationStarters() {
    return conversationStarters;
  }

  public void setConversationStarters(@javax.annotation.Nonnull ConversationStarterCollection conversationStarters) {
    this.conversationStarters = conversationStarters;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    Group group = (Group) o;
    return Objects.equals(this.groupID, group.groupID) &&
        Objects.equals(this.date, group.date) &&
        Objects.equals(this.time, group.time) &&
        Objects.equals(this.location, group.location) &&
        Objects.equals(this.userStatus, group.userStatus) &&
        Objects.equals(this.conversationStarters, group.conversationStarters);
  }

  @Override
  public int hashCode() {
    return Objects.hash(groupID, date, time, location, userStatus, conversationStarters);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class Group {\n");
    sb.append("    groupID: ").append(toIndentedString(groupID)).append("\n");
    sb.append("    date: ").append(toIndentedString(date)).append("\n");
    sb.append("    time: ").append(toIndentedString(time)).append("\n");
    sb.append("    location: ").append(toIndentedString(location)).append("\n");
    sb.append("    userStatus: ").append(toIndentedString(userStatus)).append("\n");
    sb.append("    conversationStarters: ").append(toIndentedString(conversationStarters)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>(Arrays.asList("groupID", "date", "time", "location", "userStatus", "conversationStarters"));

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>(Arrays.asList("groupID", "date", "time", "location", "userStatus", "conversationStarters"));
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to Group
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!Group.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in Group is not found in the empty JSON string", Group.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!Group.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `Group` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : Group.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if (!jsonObj.get("groupID").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `groupID` to be a primitive type in the JSON string but got `%s`", jsonObj.get("groupID").toString()));
      }
      // validate the required field `location`
      Location.validateJsonElement(jsonObj.get("location"));
      // ensure the json data is an array
      if (!jsonObj.get("userStatus").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `userStatus` to be an array in the JSON string but got `%s`", jsonObj.get("userStatus").toString()));
      }

      JsonArray jsonArrayuserStatus = jsonObj.getAsJsonArray("userStatus");
      // validate the required field `userStatus` (array)
      for (int i = 0; i < jsonArrayuserStatus.size(); i++) {
        MatchStatus.validateJsonElement(jsonArrayuserStatus.get(i));
      };
      // validate the required field `conversationStarters`
      ConversationStarterCollection.validateJsonElement(jsonObj.get("conversationStarters"));
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!Group.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'Group' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<Group> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(Group.class));

       return (TypeAdapter<T>) new TypeAdapter<Group>() {
           @Override
           public void write(JsonWriter out, Group value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public Group read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of Group given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of Group
   * @throws IOException if the JSON string is invalid with respect to Group
   */
  public static Group fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, Group.class);
  }

  /**
   * Convert an instance of Group to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

