/*
 * MeetAtMensa
 * This OpenAPI specification defines the endpoints, schemas, and security mechanisms for the Meet@Mensa User micro-service. 
 *
 * The version of the OpenAPI document: 2.3.1
 * Contact: devoops@tyrean.mozmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.time.LocalDate;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import java.util.UUID;
import org.openapitools.client.model.Location;
import org.openapitools.client.model.MatchPreferences;
import org.openapitools.client.model.RequestStatus;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Object representing a request for matching a given user on a given date in the Meet@Mensa system.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2025-07-19T17:33:11.975776503Z[Etc/UTC]", comments = "Generator version: 7.14.0")
public class MatchRequest {
  public static final String SERIALIZED_NAME_REQUEST_I_D = "requestID";
  @SerializedName(SERIALIZED_NAME_REQUEST_I_D)
  @javax.annotation.Nonnull
  private UUID requestID;

  public static final String SERIALIZED_NAME_USER_I_D = "userID";
  @SerializedName(SERIALIZED_NAME_USER_I_D)
  @javax.annotation.Nonnull
  private UUID userID;

  public static final String SERIALIZED_NAME_DATE = "date";
  @SerializedName(SERIALIZED_NAME_DATE)
  @javax.annotation.Nonnull
  private LocalDate date;

  public static final String SERIALIZED_NAME_TIMESLOT = "timeslot";
  @SerializedName(SERIALIZED_NAME_TIMESLOT)
  @javax.annotation.Nonnull
  private List<Integer> timeslot = new ArrayList<>();

  public static final String SERIALIZED_NAME_LOCATION = "location";
  @SerializedName(SERIALIZED_NAME_LOCATION)
  @javax.annotation.Nonnull
  private Location location;

  public static final String SERIALIZED_NAME_PREFERENCES = "preferences";
  @SerializedName(SERIALIZED_NAME_PREFERENCES)
  @javax.annotation.Nonnull
  private MatchPreferences preferences;

  public static final String SERIALIZED_NAME_STATUS = "status";
  @SerializedName(SERIALIZED_NAME_STATUS)
  @javax.annotation.Nonnull
  private RequestStatus status;

  public MatchRequest() {
  }

  public MatchRequest requestID(@javax.annotation.Nonnull UUID requestID) {
    this.requestID = requestID;
    return this;
  }

  /**
   * The unique ID of a MatchRequest in the Meet@Mensa system.
   * @return requestID
   */
  @javax.annotation.Nonnull
  public UUID getRequestID() {
    return requestID;
  }

  public void setRequestID(@javax.annotation.Nonnull UUID requestID) {
    this.requestID = requestID;
  }


  public MatchRequest userID(@javax.annotation.Nonnull UUID userID) {
    this.userID = userID;
    return this;
  }

  /**
   * The unique ID of a single student in the Meet@Mensa system.
   * @return userID
   */
  @javax.annotation.Nonnull
  public UUID getUserID() {
    return userID;
  }

  public void setUserID(@javax.annotation.Nonnull UUID userID) {
    this.userID = userID;
  }


  public MatchRequest date(@javax.annotation.Nonnull LocalDate date) {
    this.date = date;
    return this;
  }

  /**
   * The date a user would like meet@mensa to find them a match
   * @return date
   */
  @javax.annotation.Nonnull
  public LocalDate getDate() {
    return date;
  }

  public void setDate(@javax.annotation.Nonnull LocalDate date) {
    this.date = date;
  }


  public MatchRequest timeslot(@javax.annotation.Nonnull List<Integer> timeslot) {
    this.timeslot = timeslot;
    return this;
  }

  public MatchRequest addTimeslotItem(Integer timeslotItem) {
    if (this.timeslot == null) {
      this.timeslot = new ArrayList<>();
    }
    this.timeslot.add(timeslotItem);
    return this;
  }

  /**
   * Get timeslot
   * @return timeslot
   */
  @javax.annotation.Nonnull
  public List<Integer> getTimeslot() {
    return timeslot;
  }

  public void setTimeslot(@javax.annotation.Nonnull List<Integer> timeslot) {
    this.timeslot = timeslot;
  }


  public MatchRequest location(@javax.annotation.Nonnull Location location) {
    this.location = location;
    return this;
  }

  /**
   * Get location
   * @return location
   */
  @javax.annotation.Nonnull
  public Location getLocation() {
    return location;
  }

  public void setLocation(@javax.annotation.Nonnull Location location) {
    this.location = location;
  }


  public MatchRequest preferences(@javax.annotation.Nonnull MatchPreferences preferences) {
    this.preferences = preferences;
    return this;
  }

  /**
   * Get preferences
   * @return preferences
   */
  @javax.annotation.Nonnull
  public MatchPreferences getPreferences() {
    return preferences;
  }

  public void setPreferences(@javax.annotation.Nonnull MatchPreferences preferences) {
    this.preferences = preferences;
  }


  public MatchRequest status(@javax.annotation.Nonnull RequestStatus status) {
    this.status = status;
    return this;
  }

  /**
   * Get status
   * @return status
   */
  @javax.annotation.Nonnull
  public RequestStatus getStatus() {
    return status;
  }

  public void setStatus(@javax.annotation.Nonnull RequestStatus status) {
    this.status = status;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    MatchRequest matchRequest = (MatchRequest) o;
    return Objects.equals(this.requestID, matchRequest.requestID) &&
        Objects.equals(this.userID, matchRequest.userID) &&
        Objects.equals(this.date, matchRequest.date) &&
        Objects.equals(this.timeslot, matchRequest.timeslot) &&
        Objects.equals(this.location, matchRequest.location) &&
        Objects.equals(this.preferences, matchRequest.preferences) &&
        Objects.equals(this.status, matchRequest.status);
  }

  @Override
  public int hashCode() {
    return Objects.hash(requestID, userID, date, timeslot, location, preferences, status);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class MatchRequest {\n");
    sb.append("    requestID: ").append(toIndentedString(requestID)).append("\n");
    sb.append("    userID: ").append(toIndentedString(userID)).append("\n");
    sb.append("    date: ").append(toIndentedString(date)).append("\n");
    sb.append("    timeslot: ").append(toIndentedString(timeslot)).append("\n");
    sb.append("    location: ").append(toIndentedString(location)).append("\n");
    sb.append("    preferences: ").append(toIndentedString(preferences)).append("\n");
    sb.append("    status: ").append(toIndentedString(status)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>(Arrays.asList("requestID", "userID", "date", "timeslot", "location", "preferences", "status"));

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>(Arrays.asList("requestID", "userID", "date", "timeslot", "location", "preferences", "status"));
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to MatchRequest
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!MatchRequest.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in MatchRequest is not found in the empty JSON string", MatchRequest.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!MatchRequest.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `MatchRequest` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : MatchRequest.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if (!jsonObj.get("requestID").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `requestID` to be a primitive type in the JSON string but got `%s`", jsonObj.get("requestID").toString()));
      }
      if (!jsonObj.get("userID").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `userID` to be a primitive type in the JSON string but got `%s`", jsonObj.get("userID").toString()));
      }
      // ensure the required json array is present
      if (jsonObj.get("timeslot") == null) {
        throw new IllegalArgumentException("Expected the field `linkedContent` to be an array in the JSON string but got `null`");
      } else if (!jsonObj.get("timeslot").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `timeslot` to be an array in the JSON string but got `%s`", jsonObj.get("timeslot").toString()));
      }
      // validate the required field `location`
      Location.validateJsonElement(jsonObj.get("location"));
      // validate the required field `preferences`
      MatchPreferences.validateJsonElement(jsonObj.get("preferences"));
      // validate the required field `status`
      RequestStatus.validateJsonElement(jsonObj.get("status"));
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!MatchRequest.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'MatchRequest' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<MatchRequest> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(MatchRequest.class));

       return (TypeAdapter<T>) new TypeAdapter<MatchRequest>() {
           @Override
           public void write(JsonWriter out, MatchRequest value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public MatchRequest read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of MatchRequest given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of MatchRequest
   * @throws IOException if the JSON string is invalid with respect to MatchRequest
   */
  public static MatchRequest fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, MatchRequest.class);
  }

  /**
   * Convert an instance of MatchRequest to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

