/*
 * MeetAtMensa
 * This OpenAPI specification defines the endpoints, schemas, and security mechanisms for the Meet@Mensa User micro-service. 
 *
 * The version of the OpenAPI document: 2.2.2
 * Contact: devoops@tyrean.mozmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiCallback;
import org.openapitools.client.ApiClient;
import org.openapitools.client.ApiException;
import org.openapitools.client.ApiResponse;
import org.openapitools.client.Configuration;
import org.openapitools.client.Pair;
import org.openapitools.client.ProgressRequestBody;
import org.openapitools.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import java.util.UUID;
import org.openapitools.client.model.User;
import org.openapitools.client.model.UserNew;
import org.openapitools.client.model.UserUpdate;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class UserApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public UserApi() {
        this(Configuration.getDefaultApiClient());
    }

    public UserApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for deleteApiV2UserUserID
     * @param userId UUID associated with a given user (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> User deleted </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> The request was malformed or contained invalid parameters.  </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> The request was malformed or contained invalid parameters.  </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The requested resource was not found.  </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteApiV2UserUserIDCall(@javax.annotation.Nonnull UUID userId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/v2/user/{user-id}"
            .replace("{" + "user-id" + "}", localVarApiClient.escapeString(userId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "jwt-bearer" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call deleteApiV2UserUserIDValidateBeforeCall(@javax.annotation.Nonnull UUID userId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'userId' is set
        if (userId == null) {
            throw new ApiException("Missing the required parameter 'userId' when calling deleteApiV2UserUserID(Async)");
        }

        return deleteApiV2UserUserIDCall(userId, _callback);

    }

    /**
     * Delete User with {user-id}
     * Remove all information about user with ID {user-id} from user-service
     * @param userId UUID associated with a given user (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> User deleted </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> The request was malformed or contained invalid parameters.  </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> The request was malformed or contained invalid parameters.  </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The requested resource was not found.  </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
     </table>
     */
    public void deleteApiV2UserUserID(@javax.annotation.Nonnull UUID userId) throws ApiException {
        deleteApiV2UserUserIDWithHttpInfo(userId);
    }

    /**
     * Delete User with {user-id}
     * Remove all information about user with ID {user-id} from user-service
     * @param userId UUID associated with a given user (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> User deleted </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> The request was malformed or contained invalid parameters.  </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> The request was malformed or contained invalid parameters.  </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The requested resource was not found.  </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> deleteApiV2UserUserIDWithHttpInfo(@javax.annotation.Nonnull UUID userId) throws ApiException {
        okhttp3.Call localVarCall = deleteApiV2UserUserIDValidateBeforeCall(userId, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Delete User with {user-id} (asynchronously)
     * Remove all information about user with ID {user-id} from user-service
     * @param userId UUID associated with a given user (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> User deleted </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> The request was malformed or contained invalid parameters.  </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> The request was malformed or contained invalid parameters.  </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The requested resource was not found.  </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteApiV2UserUserIDAsync(@javax.annotation.Nonnull UUID userId, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = deleteApiV2UserUserIDValidateBeforeCall(userId, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for getApiV2UserMeAuthId
     * @param authId User&#39;s Auth0 sub ID (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getApiV2UserMeAuthIdCall(@javax.annotation.Nonnull String authId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/v2/user/me/{auth-id}"
            .replace("{" + "auth-id" + "}", localVarApiClient.escapeString(authId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "jwt-bearer" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getApiV2UserMeAuthIdValidateBeforeCall(@javax.annotation.Nonnull String authId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'authId' is set
        if (authId == null) {
            throw new ApiException("Missing the required parameter 'authId' when calling getApiV2UserMeAuthId(Async)");
        }

        return getApiV2UserMeAuthIdCall(authId, _callback);

    }

    /**
     * Retrieve User based on AuthID
     * Retrieve a user object based on an Auth0 sub ID
     * @param authId User&#39;s Auth0 sub ID (required)
     * @return User
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public User getApiV2UserMeAuthId(@javax.annotation.Nonnull String authId) throws ApiException {
        ApiResponse<User> localVarResp = getApiV2UserMeAuthIdWithHttpInfo(authId);
        return localVarResp.getData();
    }

    /**
     * Retrieve User based on AuthID
     * Retrieve a user object based on an Auth0 sub ID
     * @param authId User&#39;s Auth0 sub ID (required)
     * @return ApiResponse&lt;User&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<User> getApiV2UserMeAuthIdWithHttpInfo(@javax.annotation.Nonnull String authId) throws ApiException {
        okhttp3.Call localVarCall = getApiV2UserMeAuthIdValidateBeforeCall(authId, null);
        Type localVarReturnType = new TypeToken<User>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Retrieve User based on AuthID (asynchronously)
     * Retrieve a user object based on an Auth0 sub ID
     * @param authId User&#39;s Auth0 sub ID (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getApiV2UserMeAuthIdAsync(@javax.annotation.Nonnull String authId, final ApiCallback<User> _callback) throws ApiException {

        okhttp3.Call localVarCall = getApiV2UserMeAuthIdValidateBeforeCall(authId, _callback);
        Type localVarReturnType = new TypeToken<User>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getApiV2UserUserID
     * @param userId UUID associated with a given user (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> The request was malformed or contained invalid parameters.  </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Authentication failed due to missing or invalid OAuth2 token.  </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The requested resource was not found.  </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getApiV2UserUserIDCall(@javax.annotation.Nonnull UUID userId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/v2/user/{user-id}"
            .replace("{" + "user-id" + "}", localVarApiClient.escapeString(userId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "jwt-bearer" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getApiV2UserUserIDValidateBeforeCall(@javax.annotation.Nonnull UUID userId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'userId' is set
        if (userId == null) {
            throw new ApiException("Missing the required parameter 'userId' when calling getApiV2UserUserID(Async)");
        }

        return getApiV2UserUserIDCall(userId, _callback);

    }

    /**
     * Retrieve User with {user-id}
     * Fetch all information about user with ID {user-id} from user-service
     * @param userId UUID associated with a given user (required)
     * @return User
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> The request was malformed or contained invalid parameters.  </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Authentication failed due to missing or invalid OAuth2 token.  </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The requested resource was not found.  </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
     </table>
     */
    public User getApiV2UserUserID(@javax.annotation.Nonnull UUID userId) throws ApiException {
        ApiResponse<User> localVarResp = getApiV2UserUserIDWithHttpInfo(userId);
        return localVarResp.getData();
    }

    /**
     * Retrieve User with {user-id}
     * Fetch all information about user with ID {user-id} from user-service
     * @param userId UUID associated with a given user (required)
     * @return ApiResponse&lt;User&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> The request was malformed or contained invalid parameters.  </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Authentication failed due to missing or invalid OAuth2 token.  </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The requested resource was not found.  </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<User> getApiV2UserUserIDWithHttpInfo(@javax.annotation.Nonnull UUID userId) throws ApiException {
        okhttp3.Call localVarCall = getApiV2UserUserIDValidateBeforeCall(userId, null);
        Type localVarReturnType = new TypeToken<User>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Retrieve User with {user-id} (asynchronously)
     * Fetch all information about user with ID {user-id} from user-service
     * @param userId UUID associated with a given user (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> The request was malformed or contained invalid parameters.  </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Authentication failed due to missing or invalid OAuth2 token.  </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The requested resource was not found.  </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getApiV2UserUserIDAsync(@javax.annotation.Nonnull UUID userId, final ApiCallback<User> _callback) throws ApiException {

        okhttp3.Call localVarCall = getApiV2UserUserIDValidateBeforeCall(userId, _callback);
        Type localVarReturnType = new TypeToken<User>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for postApiV2UserRegister
     * @param userNew  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> The request was malformed or contained invalid parameters.  </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Authentication failed due to missing or invalid OAuth2 token.  </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> Conflict </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call postApiV2UserRegisterCall(@javax.annotation.Nullable UserNew userNew, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = userNew;

        // create path and map variables
        String localVarPath = "/api/v2/user/register";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "jwt-bearer" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call postApiV2UserRegisterValidateBeforeCall(@javax.annotation.Nullable UserNew userNew, final ApiCallback _callback) throws ApiException {
        return postApiV2UserRegisterCall(userNew, _callback);

    }

    /**
     * Register new User
     * Register a new user and respond with it&#39;s {user-id}
     * @param userNew  (optional)
     * @return User
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> The request was malformed or contained invalid parameters.  </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Authentication failed due to missing or invalid OAuth2 token.  </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> Conflict </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
     </table>
     */
    public User postApiV2UserRegister(@javax.annotation.Nullable UserNew userNew) throws ApiException {
        ApiResponse<User> localVarResp = postApiV2UserRegisterWithHttpInfo(userNew);
        return localVarResp.getData();
    }

    /**
     * Register new User
     * Register a new user and respond with it&#39;s {user-id}
     * @param userNew  (optional)
     * @return ApiResponse&lt;User&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> The request was malformed or contained invalid parameters.  </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Authentication failed due to missing or invalid OAuth2 token.  </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> Conflict </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<User> postApiV2UserRegisterWithHttpInfo(@javax.annotation.Nullable UserNew userNew) throws ApiException {
        okhttp3.Call localVarCall = postApiV2UserRegisterValidateBeforeCall(userNew, null);
        Type localVarReturnType = new TypeToken<User>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Register new User (asynchronously)
     * Register a new user and respond with it&#39;s {user-id}
     * @param userNew  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> The request was malformed or contained invalid parameters.  </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Authentication failed due to missing or invalid OAuth2 token.  </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> Conflict </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call postApiV2UserRegisterAsync(@javax.annotation.Nullable UserNew userNew, final ApiCallback<User> _callback) throws ApiException {

        okhttp3.Call localVarCall = postApiV2UserRegisterValidateBeforeCall(userNew, _callback);
        Type localVarReturnType = new TypeToken<User>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for putApiV2UserUserID
     * @param userId UUID associated with a given user (required)
     * @param userUpdate  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> User updated successfully </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> The request was malformed or contained invalid parameters.  </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Authentication failed due to missing or invalid OAuth2 token.  </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The requested resource was not found.  </td><td>  -  </td></tr>
        <tr><td> 5XX </td><td> Server Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call putApiV2UserUserIDCall(@javax.annotation.Nonnull UUID userId, @javax.annotation.Nullable UserUpdate userUpdate, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = userUpdate;

        // create path and map variables
        String localVarPath = "/api/v2/user/{user-id}"
            .replace("{" + "user-id" + "}", localVarApiClient.escapeString(userId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "jwt-bearer" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call putApiV2UserUserIDValidateBeforeCall(@javax.annotation.Nonnull UUID userId, @javax.annotation.Nullable UserUpdate userUpdate, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'userId' is set
        if (userId == null) {
            throw new ApiException("Missing the required parameter 'userId' when calling putApiV2UserUserID(Async)");
        }

        return putApiV2UserUserIDCall(userId, userUpdate, _callback);

    }

    /**
     * Update User with {user-id}
     * Update all information about user with ID {user-id} from user-service
     * @param userId UUID associated with a given user (required)
     * @param userUpdate  (optional)
     * @return User
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> User updated successfully </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> The request was malformed or contained invalid parameters.  </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Authentication failed due to missing or invalid OAuth2 token.  </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The requested resource was not found.  </td><td>  -  </td></tr>
        <tr><td> 5XX </td><td> Server Error </td><td>  -  </td></tr>
     </table>
     */
    public User putApiV2UserUserID(@javax.annotation.Nonnull UUID userId, @javax.annotation.Nullable UserUpdate userUpdate) throws ApiException {
        ApiResponse<User> localVarResp = putApiV2UserUserIDWithHttpInfo(userId, userUpdate);
        return localVarResp.getData();
    }

    /**
     * Update User with {user-id}
     * Update all information about user with ID {user-id} from user-service
     * @param userId UUID associated with a given user (required)
     * @param userUpdate  (optional)
     * @return ApiResponse&lt;User&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> User updated successfully </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> The request was malformed or contained invalid parameters.  </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Authentication failed due to missing or invalid OAuth2 token.  </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The requested resource was not found.  </td><td>  -  </td></tr>
        <tr><td> 5XX </td><td> Server Error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<User> putApiV2UserUserIDWithHttpInfo(@javax.annotation.Nonnull UUID userId, @javax.annotation.Nullable UserUpdate userUpdate) throws ApiException {
        okhttp3.Call localVarCall = putApiV2UserUserIDValidateBeforeCall(userId, userUpdate, null);
        Type localVarReturnType = new TypeToken<User>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Update User with {user-id} (asynchronously)
     * Update all information about user with ID {user-id} from user-service
     * @param userId UUID associated with a given user (required)
     * @param userUpdate  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> User updated successfully </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> The request was malformed or contained invalid parameters.  </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Authentication failed due to missing or invalid OAuth2 token.  </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The requested resource was not found.  </td><td>  -  </td></tr>
        <tr><td> 5XX </td><td> Server Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call putApiV2UserUserIDAsync(@javax.annotation.Nonnull UUID userId, @javax.annotation.Nullable UserUpdate userUpdate, final ApiCallback<User> _callback) throws ApiException {

        okhttp3.Call localVarCall = putApiV2UserUserIDValidateBeforeCall(userId, userUpdate, _callback);
        Type localVarReturnType = new TypeToken<User>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
