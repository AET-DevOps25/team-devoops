/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech) (7.14.0).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
package org.openapitools.api;

import org.openapitools.model.MatchCollection;
import org.openapitools.model.MatchRequest;
import org.openapitools.model.MatchRequestCollection;
import org.openapitools.model.MatchRequestNew;
import org.openapitools.model.MatchRequestUpdate;
import java.util.UUID;
import io.swagger.v3.oas.annotations.ExternalDocumentation;
import io.swagger.v3.oas.annotations.Operation;
import io.swagger.v3.oas.annotations.Parameter;
import io.swagger.v3.oas.annotations.Parameters;
import io.swagger.v3.oas.annotations.media.ArraySchema;
import io.swagger.v3.oas.annotations.media.Content;
import io.swagger.v3.oas.annotations.media.Schema;
import io.swagger.v3.oas.annotations.responses.ApiResponse;
import io.swagger.v3.oas.annotations.security.SecurityRequirement;
import io.swagger.v3.oas.annotations.tags.Tag;
import io.swagger.v3.oas.annotations.enums.ParameterIn;
import io.swagger.v3.oas.annotations.media.ExampleObject;
import org.springframework.http.HttpStatus;
import org.springframework.http.MediaType;
import org.springframework.lang.Nullable;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.*;
import org.springframework.web.context.request.NativeWebRequest;
import org.springframework.web.multipart.MultipartFile;

import javax.validation.Valid;
import javax.validation.constraints.*;
import java.util.List;
import java.util.Map;
import java.util.Optional;
import javax.annotation.Generated;

@Generated(value = "org.openapitools.codegen.languages.SpringCodegen", date = "2025-07-01T14:38:34.059853196Z[Etc/UTC]", comments = "Generator version: 7.14.0")
@Validated
@Tag(name = "Matching", description = "Paths belonging to the Matching microservice")
public interface MatchingApi {

    default Optional<NativeWebRequest> getRequest() {
        return Optional.empty();
    }

    /**
     * DELETE /api/v2/matching/request/{request-id} : Delete MatchRequest with {request-id}
     * Delete MatchRequest with ID {request-id} from the system
     *
     * @param requestId UUID associated with a given match request (required)
     * @return Request Deleted (status code 200)
     *         or The request was malformed or contained invalid parameters.  (status code 400)
     *         or Authentication failed due to missing or invalid OAuth2 token.  (status code 401)
     *         or The requested resource was not found.  (status code 404)
     *         or Internal Server Error (status code 500)
     */
    @Operation(
        operationId = "deleteApiV2MatchingRequestRequestId",
        summary = "Delete MatchRequest with {request-id}",
        description = "Delete MatchRequest with ID {request-id} from the system",
        tags = { "Matching" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Request Deleted"),
            @ApiResponse(responseCode = "400", description = "The request was malformed or contained invalid parameters. "),
            @ApiResponse(responseCode = "401", description = "Authentication failed due to missing or invalid OAuth2 token. "),
            @ApiResponse(responseCode = "404", description = "The requested resource was not found. "),
            @ApiResponse(responseCode = "500", description = "Internal Server Error")
        },
        security = {
            @SecurityRequirement(name = "auth0")
        }
    )
    @RequestMapping(
        method = RequestMethod.DELETE,
        value = "/api/v2/matching/request/{request-id}"
    )
    
    default ResponseEntity<Void> deleteApiV2MatchingRequestRequestId(
        @Parameter(name = "request-id", description = "UUID associated with a given match request", required = true, in = ParameterIn.PATH) @PathVariable("request-id") UUID requestId
    ) {
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * GET /api/v2/matching/matches/{user-id} : Retrieve all matches for a {user-id}
     * Retrieve all matches for a user with {user-id} from the matching-service
     *
     * @param userId UUID associated with a given user (required)
     * @return OK (status code 200)
     *         or The request was malformed or contained invalid parameters.  (status code 400)
     *         or Authentication failed due to missing or invalid OAuth2 token.  (status code 401)
     *         or The requested resource was not found.  (status code 404)
     *         or Internal Server Error (status code 500)
     */
    @Operation(
        operationId = "getApiV2MatchingMatchesUserID",
        summary = "Retrieve all matches for a {user-id}",
        description = "Retrieve all matches for a user with {user-id} from the matching-service",
        tags = { "Matching" },
        responses = {
            @ApiResponse(responseCode = "200", description = "OK", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = MatchCollection.class))
            }),
            @ApiResponse(responseCode = "400", description = "The request was malformed or contained invalid parameters. "),
            @ApiResponse(responseCode = "401", description = "Authentication failed due to missing or invalid OAuth2 token. "),
            @ApiResponse(responseCode = "404", description = "The requested resource was not found. "),
            @ApiResponse(responseCode = "500", description = "Internal Server Error")
        },
        security = {
            @SecurityRequirement(name = "auth0")
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/api/v2/matching/matches/{user-id}",
        produces = { "application/json" }
    )
    
    default ResponseEntity<MatchCollection> getApiV2MatchingMatchesUserID(
        @Parameter(name = "user-id", description = "UUID associated with a given user", required = true, in = ParameterIn.PATH) @PathVariable("user-id") UUID userId
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"matches\" : [ { \"userID\" : \"046b6c7f-0b8a-43b9-b35d-6489e6daee91\", \"matchID\" : \"046b6c7f-0b8a-43b9-b35d-6489e6daee91\", \"status\" : \"UNSENT\", \"group\" : { \"date\" : \"2000-01-23\", \"userStatus\" : [ { \"userID\" : \"046b6c7f-0b8a-43b9-b35d-6489e6daee91\" }, { \"userID\" : \"046b6c7f-0b8a-43b9-b35d-6489e6daee91\" } ], \"groupID\" : \"046b6c7f-0b8a-43b9-b35d-6489e6daee91\", \"location\" : \"GARCHING\", \"conversationStarters\" : { \"conversationsStarters\" : [ { \"prompt\" : \"prompt\" }, { \"prompt\" : \"prompt\" } ] }, \"time\" : 2 } }, { \"userID\" : \"046b6c7f-0b8a-43b9-b35d-6489e6daee91\", \"matchID\" : \"046b6c7f-0b8a-43b9-b35d-6489e6daee91\", \"status\" : \"UNSENT\", \"group\" : { \"date\" : \"2000-01-23\", \"userStatus\" : [ { \"userID\" : \"046b6c7f-0b8a-43b9-b35d-6489e6daee91\" }, { \"userID\" : \"046b6c7f-0b8a-43b9-b35d-6489e6daee91\" } ], \"groupID\" : \"046b6c7f-0b8a-43b9-b35d-6489e6daee91\", \"location\" : \"GARCHING\", \"conversationStarters\" : { \"conversationsStarters\" : [ { \"prompt\" : \"prompt\" }, { \"prompt\" : \"prompt\" } ] }, \"time\" : 2 } } ] }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * GET /api/v2/matching/requests/{user-id} : Retrieve all MatchRequests for a {user-id}
     * Retrieve all MatchRequests for a user with {user-id} from the matching-service
     *
     * @param userId UUID associated with a given user (required)
     * @return OK (status code 200)
     *         or The request was malformed or contained invalid parameters.  (status code 400)
     *         or Authentication failed due to missing or invalid OAuth2 token.  (status code 401)
     *         or The requested resource was not found.  (status code 404)
     *         or Internal Server Error (status code 500)
     */
    @Operation(
        operationId = "getApiV2MatchingRequestsUserID",
        summary = "Retrieve all MatchRequests for a {user-id}",
        description = "Retrieve all MatchRequests for a user with {user-id} from the matching-service",
        tags = { "Matching" },
        responses = {
            @ApiResponse(responseCode = "200", description = "OK", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = MatchRequestCollection.class))
            }),
            @ApiResponse(responseCode = "400", description = "The request was malformed or contained invalid parameters. "),
            @ApiResponse(responseCode = "401", description = "Authentication failed due to missing or invalid OAuth2 token. "),
            @ApiResponse(responseCode = "404", description = "The requested resource was not found. "),
            @ApiResponse(responseCode = "500", description = "Internal Server Error")
        },
        security = {
            @SecurityRequirement(name = "auth0")
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/api/v2/matching/requests/{user-id}",
        produces = { "application/json" }
    )
    
    default ResponseEntity<MatchRequestCollection> getApiV2MatchingRequestsUserID(
        @Parameter(name = "user-id", description = "UUID associated with a given user", required = true, in = ParameterIn.PATH) @PathVariable("user-id") UUID userId
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"requests\" : [ { \"date\" : \"2000-01-23\", \"preferences\" : { \"degreePref\" : true, \"agePref\" : true, \"genderPref\" : true }, \"requestID\" : \"046b6c7f-0b8a-43b9-b35d-6489e6daee91\", \"timeslot\" : [ null, null ], \"location\" : \"GARCHING\", \"userID\" : \"046b6c7f-0b8a-43b9-b35d-6489e6daee91\", \"status\" : \"PENDING\" }, { \"date\" : \"2000-01-23\", \"preferences\" : { \"degreePref\" : true, \"agePref\" : true, \"genderPref\" : true }, \"requestID\" : \"046b6c7f-0b8a-43b9-b35d-6489e6daee91\", \"timeslot\" : [ null, null ], \"location\" : \"GARCHING\", \"userID\" : \"046b6c7f-0b8a-43b9-b35d-6489e6daee91\", \"status\" : \"PENDING\" } ] }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * GET /api/v2/matching/rsvp/{match-id}/accept : Accept invitation to a given match
     * Accept invitation to a given match
     *
     * @param matchId UUID associated with a given match (required)
     * @return OK (status code 200)
     *         or Authentication failed due to missing or invalid OAuth2 token.  (status code 401)
     *         or The requested resource was not found.  (status code 404)
     *         or Internal Server Error (status code 500)
     */
    @Operation(
        operationId = "getApiV2MatchingRsvpMatchIdAccept",
        summary = "Accept invitation to a given match",
        description = "Accept invitation to a given match",
        tags = { "Matching" },
        responses = {
            @ApiResponse(responseCode = "200", description = "OK"),
            @ApiResponse(responseCode = "401", description = "Authentication failed due to missing or invalid OAuth2 token. "),
            @ApiResponse(responseCode = "404", description = "The requested resource was not found. "),
            @ApiResponse(responseCode = "500", description = "Internal Server Error")
        },
        security = {
            @SecurityRequirement(name = "auth0")
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/api/v2/matching/rsvp/{match-id}/accept"
    )
    
    default ResponseEntity<Void> getApiV2MatchingRsvpMatchIdAccept(
        @Parameter(name = "match-id", description = "UUID associated with a given match", required = true, in = ParameterIn.PATH) @PathVariable("match-id") UUID matchId
    ) {
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * GET /api/v2/matching/rsvp/{match-id}/reject : Reject invitation to a given match
     * Reject invitation to a given match
     *
     * @param matchId UUID associated with a given match (required)
     * @return OK (status code 200)
     *         or Authentication failed due to missing or invalid OAuth2 token.  (status code 401)
     *         or The requested resource was not found.  (status code 404)
     *         or Internal Server Error (status code 500)
     */
    @Operation(
        operationId = "getApiV2MatchingRsvpMatchIdReject",
        summary = "Reject invitation to a given match",
        description = "Reject invitation to a given match",
        tags = { "Matching" },
        responses = {
            @ApiResponse(responseCode = "200", description = "OK"),
            @ApiResponse(responseCode = "401", description = "Authentication failed due to missing or invalid OAuth2 token. "),
            @ApiResponse(responseCode = "404", description = "The requested resource was not found. "),
            @ApiResponse(responseCode = "500", description = "Internal Server Error")
        },
        security = {
            @SecurityRequirement(name = "auth0")
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/api/v2/matching/rsvp/{match-id}/reject"
    )
    
    default ResponseEntity<Void> getApiV2MatchingRsvpMatchIdReject(
        @Parameter(name = "match-id", description = "UUID associated with a given match", required = true, in = ParameterIn.PATH) @PathVariable("match-id") UUID matchId
    ) {
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * POST /api/v2/matching/request/submit : Submit matching Request
     * Submit a new matching request to the Matching-Service
     *
     * @param matchRequestNew  (optional)
     * @return Request submitted sucessfully (status code 200)
     *         or The request was malformed or contained invalid parameters.  (status code 400)
     *         or Authentication failed due to missing or invalid OAuth2 token.  (status code 401)
     *         or Internal Server Error (status code 500)
     */
    @Operation(
        operationId = "postApiV2MatchingRequestSubmit",
        summary = "Submit matching Request",
        description = "Submit a new matching request to the Matching-Service",
        tags = { "Matching" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Request submitted sucessfully"),
            @ApiResponse(responseCode = "400", description = "The request was malformed or contained invalid parameters. "),
            @ApiResponse(responseCode = "401", description = "Authentication failed due to missing or invalid OAuth2 token. "),
            @ApiResponse(responseCode = "500", description = "Internal Server Error")
        },
        security = {
            @SecurityRequirement(name = "auth0")
        }
    )
    @RequestMapping(
        method = RequestMethod.POST,
        value = "/api/v2/matching/request/submit",
        consumes = { "application/json" }
    )
    
    default ResponseEntity<Void> postApiV2MatchingRequestSubmit(
        @Parameter(name = "MatchRequestNew", description = "") @Valid @RequestBody(required = false) @Nullable MatchRequestNew matchRequestNew
    ) {
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * PUT /api/v2/matching/request/{request-id} : Update MatchRequest with {request-id}
     * Update all information in the MatchRequest with ID {request-id}
     *
     * @param requestId UUID associated with a given match request (required)
     * @param matchRequestUpdate  (optional)
     * @return Ok (status code 200)
     *         or The request was malformed or contained invalid parameters.  (status code 400)
     *         or Authentication failed due to missing or invalid OAuth2 token.  (status code 401)
     *         or The requested resource was not found.  (status code 404)
     *         or MatchRequest cannot be updated since it has already been fulfilled! (status code 406)
     *         or Internal Server Error (status code 500)
     */
    @Operation(
        operationId = "putApiV2MatchingRequestRequestId",
        summary = "Update MatchRequest with {request-id}",
        description = "Update all information in the MatchRequest with ID {request-id}",
        tags = { "Matching" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Ok", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = MatchRequest.class))
            }),
            @ApiResponse(responseCode = "400", description = "The request was malformed or contained invalid parameters. "),
            @ApiResponse(responseCode = "401", description = "Authentication failed due to missing or invalid OAuth2 token. "),
            @ApiResponse(responseCode = "404", description = "The requested resource was not found. "),
            @ApiResponse(responseCode = "406", description = "MatchRequest cannot be updated since it has already been fulfilled!"),
            @ApiResponse(responseCode = "500", description = "Internal Server Error")
        },
        security = {
            @SecurityRequirement(name = "auth0")
        }
    )
    @RequestMapping(
        method = RequestMethod.PUT,
        value = "/api/v2/matching/request/{request-id}",
        produces = { "application/json" },
        consumes = { "application/json" }
    )
    
    default ResponseEntity<MatchRequest> putApiV2MatchingRequestRequestId(
        @Parameter(name = "request-id", description = "UUID associated with a given match request", required = true, in = ParameterIn.PATH) @PathVariable("request-id") UUID requestId,
        @Parameter(name = "MatchRequestUpdate", description = "") @Valid @RequestBody(required = false) @Nullable MatchRequestUpdate matchRequestUpdate
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"date\" : \"2000-01-23\", \"preferences\" : { \"degreePref\" : true, \"agePref\" : true, \"genderPref\" : true }, \"requestID\" : \"046b6c7f-0b8a-43b9-b35d-6489e6daee91\", \"timeslot\" : [ null, null ], \"location\" : \"GARCHING\", \"userID\" : \"046b6c7f-0b8a-43b9-b35d-6489e6daee91\", \"status\" : \"PENDING\" }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }

}
