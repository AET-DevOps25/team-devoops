/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech) (7.14.0).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
package org.openapitools.api;

import java.util.UUID;
import org.openapitools.model.User;
import org.openapitools.model.UserCollection;
import org.openapitools.model.UserNew;
import org.openapitools.model.UserUpdate;
import io.swagger.v3.oas.annotations.ExternalDocumentation;
import io.swagger.v3.oas.annotations.Operation;
import io.swagger.v3.oas.annotations.Parameter;
import io.swagger.v3.oas.annotations.Parameters;
import io.swagger.v3.oas.annotations.media.ArraySchema;
import io.swagger.v3.oas.annotations.media.Content;
import io.swagger.v3.oas.annotations.media.Schema;
import io.swagger.v3.oas.annotations.responses.ApiResponse;
import io.swagger.v3.oas.annotations.security.SecurityRequirement;
import io.swagger.v3.oas.annotations.tags.Tag;
import io.swagger.v3.oas.annotations.enums.ParameterIn;
import io.swagger.v3.oas.annotations.media.ExampleObject;
import org.springframework.http.HttpStatus;
import org.springframework.http.MediaType;
import org.springframework.lang.Nullable;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.*;
import org.springframework.web.context.request.NativeWebRequest;
import org.springframework.web.multipart.MultipartFile;

import javax.validation.Valid;
import javax.validation.constraints.*;
import java.util.List;
import java.util.Map;
import java.util.Optional;
import javax.annotation.Generated;

@Generated(value = "org.openapitools.codegen.languages.SpringCodegen", date = "2025-07-20T16:11:13.383216526Z[Etc/UTC]", comments = "Generator version: 7.14.0")
@Validated
@Tag(name = "User", description = "Paths belonging to the User microservice")
public interface UserApi {

    default Optional<NativeWebRequest> getRequest() {
        return Optional.empty();
    }

    /**
     * DELETE /api/v2/user/{user-id} : Delete User with {user-id}
     * Remove all information about user with ID {user-id} from user-service
     *
     * @param userId UUID associated with a given user (required)
     * @return User deleted (status code 200)
     *         or The request was malformed or contained invalid parameters.  (status code 400)
     *         or The request was malformed or contained invalid parameters.  (status code 401)
     *         or The requested resource was not found.  (status code 404)
     *         or Internal Server Error (status code 500)
     */
    @Operation(
        operationId = "deleteApiV2UserUserID",
        summary = "Delete User with {user-id}",
        description = "Remove all information about user with ID {user-id} from user-service",
        tags = { "User" },
        responses = {
            @ApiResponse(responseCode = "200", description = "User deleted"),
            @ApiResponse(responseCode = "400", description = "The request was malformed or contained invalid parameters. "),
            @ApiResponse(responseCode = "401", description = "The request was malformed or contained invalid parameters. "),
            @ApiResponse(responseCode = "404", description = "The requested resource was not found. "),
            @ApiResponse(responseCode = "500", description = "Internal Server Error")
        },
        security = {
            @SecurityRequirement(name = "jwt-bearer")
        }
    )
    @RequestMapping(
        method = RequestMethod.DELETE,
        value = "/api/v2/user/{user-id}"
    )
    
    default ResponseEntity<Void> deleteApiV2UserUserID(
        @Parameter(name = "user-id", description = "UUID associated with a given user", required = true, in = ParameterIn.PATH) @PathVariable("user-id") UUID userId
    ) {
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * GET /api/v2/user/me/{auth-id} : Retrieve User based on AuthID
     * Retrieve a user object based on an Auth0 sub ID
     *
     * @param authId User&#39;s Auth0 sub ID (required)
     * @return OK (status code 200)
     *         or Bad Request (status code 400)
     *         or Forbidden (status code 403)
     *         or Not Found (status code 404)
     */
    @Operation(
        operationId = "getApiV2UserMeAuthId",
        summary = "Retrieve User based on AuthID",
        description = "Retrieve a user object based on an Auth0 sub ID",
        tags = { "User" },
        responses = {
            @ApiResponse(responseCode = "200", description = "OK", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = User.class))
            }),
            @ApiResponse(responseCode = "400", description = "Bad Request"),
            @ApiResponse(responseCode = "403", description = "Forbidden"),
            @ApiResponse(responseCode = "404", description = "Not Found")
        },
        security = {
            @SecurityRequirement(name = "jwt-bearer")
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/api/v2/user/me/{auth-id}",
        produces = { "application/json" }
    )
    
    default ResponseEntity<User> getApiV2UserMeAuthId(
        @Parameter(name = "auth-id", description = "User's Auth0 sub ID", required = true, in = ParameterIn.PATH) @PathVariable("auth-id") String authId
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"birthday\" : \"2000-01-23\", \"firstname\" : \"Max\", \"degreeStart\" : 2024, \"gender\" : \"other\", \"degree\" : \"msc_informatics\", \"bio\" : \"bio\", \"interests\" : [ null, null ], \"userID\" : \"046b6c7f-0b8a-43b9-b35d-6489e6daee91\", \"email\" : \"email\", \"lastname\" : \"Mustermann\" }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * GET /api/v2/user/{user-id} : Retrieve User with {user-id}
     * Fetch all information about user with ID {user-id} from user-service
     *
     * @param userId UUID associated with a given user (required)
     * @return OK (status code 200)
     *         or The request was malformed or contained invalid parameters.  (status code 400)
     *         or Authentication failed due to missing or invalid OAuth2 token.  (status code 401)
     *         or The requested resource was not found.  (status code 404)
     *         or Internal Server Error (status code 500)
     */
    @Operation(
        operationId = "getApiV2UserUserID",
        summary = "Retrieve User with {user-id}",
        description = "Fetch all information about user with ID {user-id} from user-service",
        tags = { "User" },
        responses = {
            @ApiResponse(responseCode = "200", description = "OK", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = User.class))
            }),
            @ApiResponse(responseCode = "400", description = "The request was malformed or contained invalid parameters. "),
            @ApiResponse(responseCode = "401", description = "Authentication failed due to missing or invalid OAuth2 token. "),
            @ApiResponse(responseCode = "404", description = "The requested resource was not found. "),
            @ApiResponse(responseCode = "500", description = "Internal Server Error")
        },
        security = {
            @SecurityRequirement(name = "jwt-bearer")
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/api/v2/user/{user-id}",
        produces = { "application/json" }
    )
    
    default ResponseEntity<User> getApiV2UserUserID(
        @Parameter(name = "user-id", description = "UUID associated with a given user", required = true, in = ParameterIn.PATH) @PathVariable("user-id") UUID userId
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"birthday\" : \"2000-01-23\", \"firstname\" : \"Max\", \"degreeStart\" : 2024, \"gender\" : \"other\", \"degree\" : \"msc_informatics\", \"bio\" : \"bio\", \"interests\" : [ null, null ], \"userID\" : \"046b6c7f-0b8a-43b9-b35d-6489e6daee91\", \"email\" : \"email\", \"lastname\" : \"Mustermann\" }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * GET /api/v2/users/demo : Get demo users
     * Return 3 demo-users in a UserCollection
     *
     * @return OK (status code 200)
     *         or Internal Server Error (status code 500)
     */
    @Operation(
        operationId = "getApiV2UsersDemo",
        summary = "Get demo users",
        description = "Return 3 demo-users in a UserCollection",
        tags = { "User" },
        responses = {
            @ApiResponse(responseCode = "200", description = "OK", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = UserCollection.class))
            }),
            @ApiResponse(responseCode = "500", description = "Internal Server Error")
        },
        security = {
            @SecurityRequirement(name = "jwt-bearer")
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/api/v2/users/demo",
        produces = { "application/json" }
    )
    
    default ResponseEntity<UserCollection> getApiV2UsersDemo(
        
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"users\" : [ { \"birthday\" : \"2000-01-23\", \"firstname\" : \"Max\", \"degreeStart\" : 2024, \"gender\" : \"other\", \"degree\" : \"msc_informatics\", \"bio\" : \"bio\", \"interests\" : [ null, null ], \"userID\" : \"046b6c7f-0b8a-43b9-b35d-6489e6daee91\", \"email\" : \"email\", \"lastname\" : \"Mustermann\" }, { \"birthday\" : \"2000-01-23\", \"firstname\" : \"Max\", \"degreeStart\" : 2024, \"gender\" : \"other\", \"degree\" : \"msc_informatics\", \"bio\" : \"bio\", \"interests\" : [ null, null ], \"userID\" : \"046b6c7f-0b8a-43b9-b35d-6489e6daee91\", \"email\" : \"email\", \"lastname\" : \"Mustermann\" } ] }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * POST /api/v2/user/register : Register new User
     * Register a new user and respond with it&#39;s {user-id}
     *
     * @param userNew  (optional)
     * @return OK (status code 200)
     *         or The request was malformed or contained invalid parameters.  (status code 400)
     *         or Authentication failed due to missing or invalid OAuth2 token.  (status code 401)
     *         or Conflict (status code 409)
     *         or Internal Server Error (status code 500)
     */
    @Operation(
        operationId = "postApiV2UserRegister",
        summary = "Register new User",
        description = "Register a new user and respond with it's {user-id}",
        tags = { "User" },
        responses = {
            @ApiResponse(responseCode = "200", description = "OK", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = User.class))
            }),
            @ApiResponse(responseCode = "400", description = "The request was malformed or contained invalid parameters. "),
            @ApiResponse(responseCode = "401", description = "Authentication failed due to missing or invalid OAuth2 token. "),
            @ApiResponse(responseCode = "409", description = "Conflict"),
            @ApiResponse(responseCode = "500", description = "Internal Server Error")
        },
        security = {
            @SecurityRequirement(name = "jwt-bearer")
        }
    )
    @RequestMapping(
        method = RequestMethod.POST,
        value = "/api/v2/user/register",
        produces = { "application/json" },
        consumes = { "application/json" }
    )
    
    default ResponseEntity<User> postApiV2UserRegister(
        @Parameter(name = "UserNew", description = "") @Valid @RequestBody(required = false) @Nullable UserNew userNew
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"birthday\" : \"2000-01-23\", \"firstname\" : \"Max\", \"degreeStart\" : 2024, \"gender\" : \"other\", \"degree\" : \"msc_informatics\", \"bio\" : \"bio\", \"interests\" : [ null, null ], \"userID\" : \"046b6c7f-0b8a-43b9-b35d-6489e6daee91\", \"email\" : \"email\", \"lastname\" : \"Mustermann\" }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * PUT /api/v2/user/{user-id} : Update User with {user-id}
     * Update all information about user with ID {user-id} from user-service
     *
     * @param userId UUID associated with a given user (required)
     * @param userUpdate  (optional)
     * @return User updated successfully (status code 200)
     *         or The request was malformed or contained invalid parameters.  (status code 400)
     *         or Authentication failed due to missing or invalid OAuth2 token.  (status code 401)
     *         or The requested resource was not found.  (status code 404)
     *         or Server Error (status code 5XX)
     */
    @Operation(
        operationId = "putApiV2UserUserID",
        summary = "Update User with {user-id}",
        description = "Update all information about user with ID {user-id} from user-service",
        tags = { "User" },
        responses = {
            @ApiResponse(responseCode = "200", description = "User updated successfully", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = User.class))
            }),
            @ApiResponse(responseCode = "400", description = "The request was malformed or contained invalid parameters. "),
            @ApiResponse(responseCode = "401", description = "Authentication failed due to missing or invalid OAuth2 token. "),
            @ApiResponse(responseCode = "404", description = "The requested resource was not found. "),
            @ApiResponse(responseCode = "5XX", description = "Server Error")
        },
        security = {
            @SecurityRequirement(name = "jwt-bearer")
        }
    )
    @RequestMapping(
        method = RequestMethod.PUT,
        value = "/api/v2/user/{user-id}",
        produces = { "application/json" },
        consumes = { "application/json" }
    )
    
    default ResponseEntity<User> putApiV2UserUserID(
        @Parameter(name = "user-id", description = "UUID associated with a given user", required = true, in = ParameterIn.PATH) @PathVariable("user-id") UUID userId,
        @Parameter(name = "UserUpdate", description = "") @Valid @RequestBody(required = false) @Nullable UserUpdate userUpdate
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"birthday\" : \"2000-01-23\", \"firstname\" : \"Max\", \"degreeStart\" : 2024, \"gender\" : \"other\", \"degree\" : \"msc_informatics\", \"bio\" : \"bio\", \"interests\" : [ null, null ], \"userID\" : \"046b6c7f-0b8a-43b9-b35d-6489e6daee91\", \"email\" : \"email\", \"lastname\" : \"Mustermann\" }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }

}
