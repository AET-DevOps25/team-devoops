package meet_at_mensa.matching.util;
import java.time.LocalDate;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import java.util.Random;
import java.util.UUID;
import java.util.random.RandomGenerator;

import org.openapitools.model.Location;
import org.openapitools.model.MatchPreferences;
import org.openapitools.model.MatchRequest;
import org.openapitools.model.RequestStatus;
import org.openapitools.model.User;
import org.openapitools.model.UserNew;

public class Generator {

    // 260 first names (generated by GPT 4.1)
    private final List<String> firstNames = Arrays.asList(
        "Aaron", "Abigail", "Adam", "Adrian", "Aidan", "Aisha", "Alex", "Alice", "Alyssa", "Amber",
        "Bailey", "Barbara", "Beatrice", "Benjamin", "Bethany", "Bianca", "Blake", "Brady", "Brandon", "Brooke",
        "Caleb", "Cameron", "Carla", "Carmen", "Carol", "Carter", "Catherine", "Chad", "Charles", "Chloe",
        "Daisy", "Dakota", "Daniel", "Danielle", "David", "Dean", "Deborah", "Dennis", "Derek", "Diana",
        "Eddie", "Eden", "Edward", "Edwin", "Eleanor", "Elena", "Eli", "Elijah", "Ella", "Emily",
        "Faith", "Felix", "Fiona", "Finn", "Flora", "Francis", "Frank", "Freddie", "Freya", "Fritz",
        "Gabriel", "Gavin", "Genevieve", "George", "Georgia", "Gerald", "Gillian", "Gina", "Grace", "Gregory",
        "Hailey", "Hannah", "Harley", "Harper", "Harrison", "Hazel", "Heather", "Henry", "Holly", "Hunter",
        "Ian", "Ida", "Igor", "Imani", "India", "Ines", "Ingrid", "Irene", "Isaac", "Isabella",
        "Jack", "Jacob", "Jade", "James", "Jasmine", "Jason", "Jasper", "Jayden", "Jennifer", "Jessica",
        "Kaitlyn", "Karen", "Katherine", "Kathleen", "Kayla", "Keith", "Kelly", "Kevin", "Kimberly", "Kyle",
        "Lacey", "Landon", "Laura", "Lauren", "Leah", "Leo", "Liam", "Lillian", "Lindsay", "Logan",
        "Madeline", "Madison", "Marcus", "Margaret", "Mariah", "Mason", "Matthew", "Megan", "Melanie", "Michael",
        "Naomi", "Natalie", "Nathan", "Neil", "Nicholas", "Nicole", "Nina", "Noah", "Nolan", "Norah",
        "Oakley", "Olive", "Oliver", "Olivia", "Omar", "Opal", "Oscar", "Otis", "Owen", "Ozzy",
        "Paige", "Pamela", "Parker", "Patrick", "Paulina", "Penelope", "Peter", "Phoebe", "Piper", "Preston",
        "Quentin","Quincy","Quinn","Quinten","Quinlan","Quiana","Quilla","Quincy","Queen","Quest",
        "Rachel","Rafael","Ralph","Raymond","Rebecca","Reed","Regina","Remy","Riley","Ruby",
        "Sabrina","Sadie","Samantha","Samuel","Sara","Scarlett","Scott","Sean","Sebastian","Sophie",
        "Tabitha","Talia","Tamara","Tanner","Taylor","Teresa","Terrence","Theodore","Thomas","Tristan",
        "Uma","Ulysses","Una","Uriah","Uriel","Ulises","Unity","Urban","Uriah","Ursula",
        "Valentina","Valerie","Vanessa","Vera","Veronica","Victor","Victoria","Vince","Vincent","Violet",
        "Wade","Walker","Walter","Wanda","Wayne","Wendy","Wesley","Weston","Whitney","Willow",
        "Xander","Xavier","Xena","Xenia","Ximena","Xiomara","Xochitl","Xyla","Xylia","Xylon",
        "Yara","Yasmin","Yasmine","Yazmin","Yehuda","Yesenia","Yolanda","Yosef","Yuliana","Yuri",
        "Zachary","Zadie","Zainab","Zara","Zayden","Zelda","Zion","Zoey","Zoe","Zuri"
    );

    // 260 last names (generated by GPT 4.1)
    private final List<String> lastNames = Arrays.asList(
        "Abbott", "Acevedo", "Acosta", "Adams", "Aguilar", "Alexander", "Allen", "Alvarez", "Anderson", "Armstrong",
        "Bailey", "Baker", "Barnes", "Barton", "Bates", "Bennett", "Berry", "Black", "Blake", "Boyd",
        "Campbell", "Carlson", "Carpenter", "Carr", "Carter", "Castillo", "Chambers", "Chavez", "Clark", "Collins",
        "Davidson", "Davies", "Dawson", "Day", "Dean", "Diaz", "Dixon", "Douglas", "Doyle", "Duncan",
        "Eaton", "Ellis", "Ellison", "Emerson", "English", "Erickson", "Escobar", "Espinoza", "Estrada", "Evans",
        "Farmer", "Ferguson", "Fernandez", "Fisher", "Fleming", "Fletcher", "Ford", "Foster", "Fox", "Franklin",
        "Garcia", "Gardner", "Garner", "George", "Gibson", "Gilbert", "Gillespie", "Gonzales", "Goodman", "Grant",
        "Hall", "Hamilton", "Hansen", "Harris", "Harrison", "Hart", "Hawkins", "Hayes", "Henderson", "Hernandez",
        "Ibarra", "Ingram", "Irwin", "Isaacs", "Ishikawa", "Iverson", "Ivey", "Ingles", "Ireland", "Ibrahim",
        "Jackson", "Jacobs", "James", "Jenkins", "Jennings", "Jimenez", "Johns", "Johnson", "Johnston", "Jordan",
        "Kaiser", "Kane", "Kaufman", "Keller", "Kelley", "Kelly", "Kennedy", "Kim", "King", "Knight",
        "Lambert", "Lane", "Larson", "Lawrence", "Lawson", "Lee", "Leonard", "Lewis", "Little", "Long",
        "Mackenzie", "Maldonado","Mann","Marshall","Martin","Martinez","Mason","Matthews","Meyer","Miller",
        "Navarro","Neal","Nelson","Newman","Nguyen","Nichols","Nielsen","Nixon","Noble","Norris",
        "O'Brien","Ochoa","Oconnor","Odom","Oliver","Olson","Ortiz","Osborn","Owen","Owens",
        "Padilla","Page","Palmer","Parker","Patterson","Payne","Pearson","Perez","Perkins","Perry",
        "Qualls","Quan","Quarles","Quentin","Quigley","Quinlan","Quinn","Quintero","Quintana","Quirk",
        "Ramirez","Ramos","Ray","Reed","Reese","Reid","Reyes","Reynolds","Rice","Richards",
        "Sampson","Sanders","Santiago","Santos","Schmidt","Schneider","Scott","Shaw","Shelton","Simpson",
        "Tate","Taylor","Terry","Thomas","Thompson","Thornton","Todd","Torres","Townsend","Tran",
        "Underwood","Upton","Urban","Urbina","Urrutia","Usher","Utley","Ullman","Unger","Ulrich",
        "Valdez","Valencia","Valentine","Valenzuela","Vargas","Vasquez","Vaughn","Vega","Velasquez","Velez",
        "Wade","Wagner","Walker","Wallace","Walsh","Walter","Walters","Ward","Warren","Watson",
        "Xander","Xanthos","Xavier","Xenos","Xiang","Xin","Xiong","Xu","Xue","Xylina",
        "Yamada","Yang","Yarbrough","Yates","Ybarra","Yeager","Yoder","York","Young","Yu",
        "Zamora","Zane","Zapata","Zaragoza","Zavala","Zayas","Zeigler","Zepeda","Zimmerman","Zuniga"
    );

    // list of 100 hobbies (generated by GPT 4.1)
    private final List<String> hobbies = Arrays.asList(
        "Acting", "Archery", "Astrophotography", "Baking", "Basketball", "Beatboxing", "Birdwatching", "Blogging", "Board Games", "Bookbinding",
        "Bowling", "Boxing", "Calligraphy", "Candle Making", "Canoeing", "Ceramics", "Chess", "Coding", "Collecting Coins", "Collecting Stamps",
        "Comedy", "Cooking", "Cosplay", "Crocheting", "CrossFit", "Crossword Puzzles", "Cycling", "Dancing", "Darts", "DJing",
        "Diving", "DnD", "Drawing", "Embroidery", "Fantasy Sports", "Fashion Design", "Filmmaking", "Fishing", "Flower Arranging", "Gaming",
        "Geocaching", "Glassblowing", "Golfing", "Graffiti Art", "Guitar Playing", "Hiking", "Home Brewing", "Ice Skating", "Jewelry Making", "Jigsaw Puzzles",
        "Journaling", "Jogging", "Karaoke", "Kite Flying", "Knitting", "LARPing", "Leathercraft", "Lego Building", "Magic Tricks", "Makeup Artistry",
        "Martial Arts", "Meditation", "Metal Detecting", "Model Building", "Mountain Biking", "Origami", "Painting", "Papercraft", "Parkour", "Pet Training",
        "Photography", "Pilates", "Ping Pong", "Piano Playing", "Podcasting", "Poetry Writing", "Pottery", "Puzzles", "Quilting", "RC Cars/Planes/Boats",
        "Reading Novels", "Rock Climbing", "Rollerblading", "Rowing", "Rubik's Cube Solving", "Running", "Sculpting", "Sewing", "Singing", "Skateboarding",
        "Sketching", "Skydiving", "Snowboarding", "Soap Making", "Soccer", "Sudoku", "Surfing", "Swimming", "Table Tennis", "Tai Chi",
        "Video Editing", "Videography", "Volunteering", "Woodworking", "Writing Stories", "Yoga"
    );

    // list of courses
    private final List<String> courses = Arrays.asList(
        "bsc_informatics", "bsc_mechanical_engineering", "bsc_chemical_engineering", "bsc_electrical_engineering", "bsc_managment",
        "msc_informatics", "msc_mechanical_engineering", "msc_chemical_engineering", "msc_electrical_engineering", "msc_managment"
    );

    // list of bios (generated by GPT 4.1)
    private final List<String> bios = Arrays.asList(
        "Aspiring artist sharing my journey.", "Coffee lover and bookworm.", "Dreaming big and working hard.", "Traveler at heart, explorer by choice.",
        "Fueled by coffee and good vibes.", "Chasing sunsets and new adventures.", "Music is my escape.", "Creating memories, one day at a time.",
        "Fitness enthusiast and foodie.", "Dog mom with a love for nature.", "Laughing through lifeâ€™s ups and downs.", "Living simply and loving deeply.",
        "Passionate about photography.", "Spreading kindness everywhere I go.", "Adventure seeker and thrill lover.", "Introvert with a wild imagination.",
        "Making magic out of the ordinary.", "Positive vibes only.", "On a mission to inspire.", "Writer by day, dreamer by night.",
        "Believer in good people and better coffee.", "Forever curious, always learning.", "My life, my rules.", "Plant parent and proud.",
        "Finding joy in little things.", "Hustling for my dreams.", "Sassy, classy, and a bit smart-assy.", "Exploring the world one place at a time.",
        "Smiling is my favorite accessory.", "Trying to leave the world better than I found it.", "Adventure is my middle name.",
        "Learning to live in the moment.", "Writer of my own story.", "Sunshine mixed with a little hurricane.", "Always up for an adventure.",
        "Dog cuddler. Pizza eater. World traveler.", "Fueled by passion and caffeine.", "Happiness is homemade.",
        "Turning dreams into reality one step at a time.", "Living for the little moments.", "Chasing dreams, catching flights."
    );

    // stores all already generated values
    private List<String> alreadyGenerated = new ArrayList<>();

    private RandomGenerator random;

    public Generator() {
        this.random = RandomGenerator.getDefault();
    }

    public Integer validTimeslot() {

        return random.nextInt(5, 17);

    }

    public List<Integer> generateTimeslots() {

        List<Integer> timeslots = new ArrayList<>();

        Integer start = random.nextInt(5, 14);

        Integer length = random.nextInt(3, 17 - start);

        for (int i = start; i < start + length + 1; i++) {
            
            timeslots.add(i);

        }

        return timeslots;

    }

    public String generateFirstname() {

        return firstNames.get(random.nextInt(firstNames.size()));

    }

    public String generateLastname() {

        return lastNames.get(random.nextInt(lastNames.size()));

    }

    public String generateGender() {

        List<String> gender = List.of("Male", "Male", "Male", "Other", "Female", "Female", "Female");

        return gender.get(random.nextInt(gender.size()));

    }

    public List<String> generateInterests(Integer count) {

        List<String> interests = new ArrayList<>();

        for (int i = 0; i < count; i++) {
            
            interests.add(hobbies.get(random.nextInt(hobbies.size())));

        }

        return interests;

    }

    public String generateCourse() {
        return courses.get(random.nextInt(courses.size()));
    }

    public String generateBio() {
        return bios.get(random.nextInt(bios.size()));
    }

    public MatchPreferences generatePreferences() {

        List<Boolean> bools = List.of(true, false);

        MatchPreferences preferences = new MatchPreferences(
            bools.get(random.nextInt(bools.size())),
            bools.get(random.nextInt(bools.size())),
            bools.get(random.nextInt(bools.size()))
        );

        return preferences;
    }


    public User generateUser() {

        String firstname;
        String lastname;

        // generate firstname and lastname until unique
        do {

            // generate firstname and lastname
            firstname = generateFirstname();
            lastname = generateLastname();

        } while (alreadyGenerated.contains(firstname + " " + lastname));

        // add to generated list
        alreadyGenerated.add(firstname + " " + lastname);

        // generate a user
        User user = new User()
            .userID(UUID.randomUUID())
            .email(firstname + "." + lastname + "@example.com")
            .firstname(firstname)
            .lastname(lastname)
            .birthday(LocalDate.of(
                random.nextInt(1995, 2008),
                random.nextInt(1, 13),
                random.nextInt(1, 29)
                )
            )
            .gender(generateGender())
            .degree(generateCourse())
            .degreeStart(random.nextInt(2020, 2025))
            .interests(generateInterests(3))
            .bio(generateBio());


        return user;

    }

    public UserNew generateUserNew() {

        User user = generateUser();

        return new UserNew()
            .authID("Auth0_" + UUID.randomUUID().toString())
            .email(user.getEmail())
            .firstname(user.getFirstname())
            .lastname(user.getLastname())
            .birthday(user.getBirthday())
            .gender(user.getGender())
            .degree(user.getDegree())
            .degreeStart(user.getDegreeStart())
            .interests(user.getInterests())
            .bio(user.getBio());

    }

    public MatchRequest generateMatchRequest(User user) {

        MatchRequest request = new MatchRequest()
            .requestID(UUID.randomUUID())
            .userID(user.getUserID())
            .date(LocalDate.now().plusDays(1))
            .timeslot(generateTimeslots())
            .location(Location.GARCHING)
            .preferences(generatePreferences())
            .status(RequestStatus.PENDING);

        return request;

    }    
}
