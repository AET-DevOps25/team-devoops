package meet_at_mensa.matching.model;

// import persistence tags
import jakarta.persistence.Entity;
import jakarta.persistence.Table;
import jakarta.persistence.Column;
import jakarta.persistence.GeneratedValue;
import jakarta.persistence.GenerationType;
import jakarta.persistence.Id;

// import utils
import java.util.UUID;
import java.time.LocalDate;

// Class Group represents a single entry (row) in the matchdb/groups table
@Entity
@Table(name = "groups")
public class GroupEntity {
    
    // ----------
    // Attributes
    // (Each attribute here corresponds to one column in the MySQL matchdb/group table)
    // ----------

    // Auto-generated unique ID for this Match request
    @Id
    @GeneratedValue(strategy=GenerationType.UUID)
    @Column(name = "group_id")
    private UUID groupID;
    
    // ID of the user who made the match request
    @Column(name = "meet_date")
    private LocalDate date;

    // group ID for the match. Null if currently unmatched
    @Column(name = "meet_timeslot")
    private Integer timeslot;

    // Whether to prioritize students with the same gender
    @Column(name = "meet_location")
    private String location;

    // -------
    // Getters
    // -------

    public UUID getGroupID() {
        return groupID;
    }
    
    public LocalDate getDate() {
        return date;
    }
    
    public Integer getTimeslot() {
        return timeslot;
    }
    
    public String getLocation() {
        return location;
    }

    // -------
    // Setters
    // -------

    // no setters for
    // - GroupID (autogenerated)
    
    public void setDate(LocalDate date) {
        this.date = date;
    }
    
    public void setTimeslot(Integer timeslot) {
        this.timeslot = timeslot;
    }
    
    public void setLocation(String location) {
        this.location = location;
    }

    // ------------
    // Constructors
    // ------------

    public GroupEntity() {

        // default constructor required by JPA

    }

    public GroupEntity(LocalDate date, Integer timeslot, String location) {

        this.date = date;
        this.timeslot = timeslot;
        this.location = location;

    }

    // ------------
    // Others
    // ------------

    // returns true if this group's meeting date is in the past
    public Boolean isOutdated() {
        return (this.date.isBefore(LocalDate.now()));
    }
}
