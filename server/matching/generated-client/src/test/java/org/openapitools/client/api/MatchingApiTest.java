/*
 * MeetAtMensa
 * This OpenAPI specification defines the endpoints, schemas, and security mechanisms for the Meet@Mensa User micro-service. 
 *
 * The version of the OpenAPI document: 2.1.5
 * Contact: devoops@tyrean.mozmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiException;
import org.openapitools.client.model.MatchCollection;
import org.openapitools.client.model.MatchRequest;
import org.openapitools.client.model.MatchRequestCollection;
import org.openapitools.client.model.MatchRequestNew;
import org.openapitools.client.model.MatchRequestUpdate;
import java.util.UUID;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for MatchingApi
 */
@Disabled
public class MatchingApiTest {

    private final MatchingApi api = new MatchingApi();

    /**
     * Delete MatchRequest with {request-id}
     *
     * Delete MatchRequest with ID {request-id} from the system
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void deleteApiV2MatchingRequestRequestIdTest() throws ApiException {
        UUID requestId = null;
        api.deleteApiV2MatchingRequestRequestId(requestId);
        // TODO: test validations
    }

    /**
     * Retrieve all matches for a {user-id}
     *
     * Retrieve all matches for a user with {user-id} from the matching-service
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getApiV2MatchingMatchesUserIDTest() throws ApiException {
        UUID userId = null;
        MatchCollection response = api.getApiV2MatchingMatchesUserID(userId);
        // TODO: test validations
    }

    /**
     * Retrieve all MatchRequests for a {user-id}
     *
     * Retrieve all MatchRequests for a user with {user-id} from the matching-service
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getApiV2MatchingRequestsUserIDTest() throws ApiException {
        UUID userId = null;
        MatchRequestCollection response = api.getApiV2MatchingRequestsUserID(userId);
        // TODO: test validations
    }

    /**
     * Accept invitation to a given match
     *
     * Accept invitation to a given match
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getApiV2MatchingRsvpMatchIdAcceptTest() throws ApiException {
        UUID matchId = null;
        api.getApiV2MatchingRsvpMatchIdAccept(matchId);
        // TODO: test validations
    }

    /**
     * Reject invitation to a given match
     *
     * Reject invitation to a given match
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getApiV2MatchingRsvpMatchIdRejectTest() throws ApiException {
        UUID matchId = null;
        api.getApiV2MatchingRsvpMatchIdReject(matchId);
        // TODO: test validations
    }

    /**
     * Submit matching Request
     *
     * Submit a new matching request to the Matching-Service
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void postApiV2MatchingRequestSubmitTest() throws ApiException {
        MatchRequestNew matchRequestNew = null;
        api.postApiV2MatchingRequestSubmit(matchRequestNew);
        // TODO: test validations
    }

    /**
     * Update MatchRequest with {request-id}
     *
     * Update all information in the MatchRequest with ID {request-id}
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void putApiV2MatchingRequestRequestIdTest() throws ApiException {
        UUID requestId = null;
        MatchRequestUpdate matchRequestUpdate = null;
        MatchRequest response = api.putApiV2MatchingRequestRequestId(requestId, matchRequestUpdate);
        // TODO: test validations
    }

}
