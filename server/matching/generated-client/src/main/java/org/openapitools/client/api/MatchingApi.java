/*
 * MeetAtMensa
 * This OpenAPI specification defines the endpoints, schemas, and security mechanisms for the Meet@Mensa User micro-service. 
 *
 * The version of the OpenAPI document: 2.2.0
 * Contact: devoops@tyrean.mozmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiCallback;
import org.openapitools.client.ApiClient;
import org.openapitools.client.ApiException;
import org.openapitools.client.ApiResponse;
import org.openapitools.client.Configuration;
import org.openapitools.client.Pair;
import org.openapitools.client.ProgressRequestBody;
import org.openapitools.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import org.openapitools.client.model.MatchCollection;
import org.openapitools.client.model.MatchRequest;
import org.openapitools.client.model.MatchRequestCollection;
import org.openapitools.client.model.MatchRequestNew;
import org.openapitools.client.model.MatchRequestUpdate;
import java.util.UUID;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class MatchingApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public MatchingApi() {
        this(Configuration.getDefaultApiClient());
    }

    public MatchingApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for deleteApiV2MatchingRequestRequestId
     * @param requestId UUID associated with a given match request (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Request Deleted </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> The request was malformed or contained invalid parameters.  </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Authentication failed due to missing or invalid OAuth2 token.  </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The requested resource was not found.  </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteApiV2MatchingRequestRequestIdCall(@javax.annotation.Nonnull UUID requestId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/v2/matching/request/{request-id}"
            .replace("{" + "request-id" + "}", localVarApiClient.escapeString(requestId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "auth0" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call deleteApiV2MatchingRequestRequestIdValidateBeforeCall(@javax.annotation.Nonnull UUID requestId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'requestId' is set
        if (requestId == null) {
            throw new ApiException("Missing the required parameter 'requestId' when calling deleteApiV2MatchingRequestRequestId(Async)");
        }

        return deleteApiV2MatchingRequestRequestIdCall(requestId, _callback);

    }

    /**
     * Delete MatchRequest with {request-id}
     * Delete MatchRequest with ID {request-id} from the system
     * @param requestId UUID associated with a given match request (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Request Deleted </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> The request was malformed or contained invalid parameters.  </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Authentication failed due to missing or invalid OAuth2 token.  </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The requested resource was not found.  </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
     </table>
     */
    public void deleteApiV2MatchingRequestRequestId(@javax.annotation.Nonnull UUID requestId) throws ApiException {
        deleteApiV2MatchingRequestRequestIdWithHttpInfo(requestId);
    }

    /**
     * Delete MatchRequest with {request-id}
     * Delete MatchRequest with ID {request-id} from the system
     * @param requestId UUID associated with a given match request (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Request Deleted </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> The request was malformed or contained invalid parameters.  </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Authentication failed due to missing or invalid OAuth2 token.  </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The requested resource was not found.  </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> deleteApiV2MatchingRequestRequestIdWithHttpInfo(@javax.annotation.Nonnull UUID requestId) throws ApiException {
        okhttp3.Call localVarCall = deleteApiV2MatchingRequestRequestIdValidateBeforeCall(requestId, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Delete MatchRequest with {request-id} (asynchronously)
     * Delete MatchRequest with ID {request-id} from the system
     * @param requestId UUID associated with a given match request (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Request Deleted </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> The request was malformed or contained invalid parameters.  </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Authentication failed due to missing or invalid OAuth2 token.  </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The requested resource was not found.  </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteApiV2MatchingRequestRequestIdAsync(@javax.annotation.Nonnull UUID requestId, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = deleteApiV2MatchingRequestRequestIdValidateBeforeCall(requestId, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for getApiV2MatchingMatchesUserID
     * @param userId UUID associated with a given user (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> The request was malformed or contained invalid parameters.  </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Authentication failed due to missing or invalid OAuth2 token.  </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The requested resource was not found.  </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getApiV2MatchingMatchesUserIDCall(@javax.annotation.Nonnull UUID userId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/v2/matching/matches/{user-id}"
            .replace("{" + "user-id" + "}", localVarApiClient.escapeString(userId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "auth0" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getApiV2MatchingMatchesUserIDValidateBeforeCall(@javax.annotation.Nonnull UUID userId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'userId' is set
        if (userId == null) {
            throw new ApiException("Missing the required parameter 'userId' when calling getApiV2MatchingMatchesUserID(Async)");
        }

        return getApiV2MatchingMatchesUserIDCall(userId, _callback);

    }

    /**
     * Retrieve all matches for a {user-id}
     * Retrieve all matches for a user with {user-id} from the matching-service
     * @param userId UUID associated with a given user (required)
     * @return MatchCollection
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> The request was malformed or contained invalid parameters.  </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Authentication failed due to missing or invalid OAuth2 token.  </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The requested resource was not found.  </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
     </table>
     */
    public MatchCollection getApiV2MatchingMatchesUserID(@javax.annotation.Nonnull UUID userId) throws ApiException {
        ApiResponse<MatchCollection> localVarResp = getApiV2MatchingMatchesUserIDWithHttpInfo(userId);
        return localVarResp.getData();
    }

    /**
     * Retrieve all matches for a {user-id}
     * Retrieve all matches for a user with {user-id} from the matching-service
     * @param userId UUID associated with a given user (required)
     * @return ApiResponse&lt;MatchCollection&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> The request was malformed or contained invalid parameters.  </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Authentication failed due to missing or invalid OAuth2 token.  </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The requested resource was not found.  </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<MatchCollection> getApiV2MatchingMatchesUserIDWithHttpInfo(@javax.annotation.Nonnull UUID userId) throws ApiException {
        okhttp3.Call localVarCall = getApiV2MatchingMatchesUserIDValidateBeforeCall(userId, null);
        Type localVarReturnType = new TypeToken<MatchCollection>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Retrieve all matches for a {user-id} (asynchronously)
     * Retrieve all matches for a user with {user-id} from the matching-service
     * @param userId UUID associated with a given user (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> The request was malformed or contained invalid parameters.  </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Authentication failed due to missing or invalid OAuth2 token.  </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The requested resource was not found.  </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getApiV2MatchingMatchesUserIDAsync(@javax.annotation.Nonnull UUID userId, final ApiCallback<MatchCollection> _callback) throws ApiException {

        okhttp3.Call localVarCall = getApiV2MatchingMatchesUserIDValidateBeforeCall(userId, _callback);
        Type localVarReturnType = new TypeToken<MatchCollection>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getApiV2MatchingRequestsUserID
     * @param userId UUID associated with a given user (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> The request was malformed or contained invalid parameters.  </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Authentication failed due to missing or invalid OAuth2 token.  </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The requested resource was not found.  </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getApiV2MatchingRequestsUserIDCall(@javax.annotation.Nonnull UUID userId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/v2/matching/requests/{user-id}"
            .replace("{" + "user-id" + "}", localVarApiClient.escapeString(userId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "auth0" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getApiV2MatchingRequestsUserIDValidateBeforeCall(@javax.annotation.Nonnull UUID userId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'userId' is set
        if (userId == null) {
            throw new ApiException("Missing the required parameter 'userId' when calling getApiV2MatchingRequestsUserID(Async)");
        }

        return getApiV2MatchingRequestsUserIDCall(userId, _callback);

    }

    /**
     * Retrieve all MatchRequests for a {user-id}
     * Retrieve all MatchRequests for a user with {user-id} from the matching-service
     * @param userId UUID associated with a given user (required)
     * @return MatchRequestCollection
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> The request was malformed or contained invalid parameters.  </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Authentication failed due to missing or invalid OAuth2 token.  </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The requested resource was not found.  </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
     </table>
     */
    public MatchRequestCollection getApiV2MatchingRequestsUserID(@javax.annotation.Nonnull UUID userId) throws ApiException {
        ApiResponse<MatchRequestCollection> localVarResp = getApiV2MatchingRequestsUserIDWithHttpInfo(userId);
        return localVarResp.getData();
    }

    /**
     * Retrieve all MatchRequests for a {user-id}
     * Retrieve all MatchRequests for a user with {user-id} from the matching-service
     * @param userId UUID associated with a given user (required)
     * @return ApiResponse&lt;MatchRequestCollection&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> The request was malformed or contained invalid parameters.  </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Authentication failed due to missing or invalid OAuth2 token.  </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The requested resource was not found.  </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<MatchRequestCollection> getApiV2MatchingRequestsUserIDWithHttpInfo(@javax.annotation.Nonnull UUID userId) throws ApiException {
        okhttp3.Call localVarCall = getApiV2MatchingRequestsUserIDValidateBeforeCall(userId, null);
        Type localVarReturnType = new TypeToken<MatchRequestCollection>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Retrieve all MatchRequests for a {user-id} (asynchronously)
     * Retrieve all MatchRequests for a user with {user-id} from the matching-service
     * @param userId UUID associated with a given user (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> The request was malformed or contained invalid parameters.  </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Authentication failed due to missing or invalid OAuth2 token.  </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The requested resource was not found.  </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getApiV2MatchingRequestsUserIDAsync(@javax.annotation.Nonnull UUID userId, final ApiCallback<MatchRequestCollection> _callback) throws ApiException {

        okhttp3.Call localVarCall = getApiV2MatchingRequestsUserIDValidateBeforeCall(userId, _callback);
        Type localVarReturnType = new TypeToken<MatchRequestCollection>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getApiV2MatchingRsvpMatchIdAccept
     * @param matchId UUID associated with a given match (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Authentication failed due to missing or invalid OAuth2 token.  </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The requested resource was not found.  </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getApiV2MatchingRsvpMatchIdAcceptCall(@javax.annotation.Nonnull UUID matchId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/v2/matching/rsvp/{match-id}/accept"
            .replace("{" + "match-id" + "}", localVarApiClient.escapeString(matchId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "auth0" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getApiV2MatchingRsvpMatchIdAcceptValidateBeforeCall(@javax.annotation.Nonnull UUID matchId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'matchId' is set
        if (matchId == null) {
            throw new ApiException("Missing the required parameter 'matchId' when calling getApiV2MatchingRsvpMatchIdAccept(Async)");
        }

        return getApiV2MatchingRsvpMatchIdAcceptCall(matchId, _callback);

    }

    /**
     * Accept invitation to a given match
     * Accept invitation to a given match
     * @param matchId UUID associated with a given match (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Authentication failed due to missing or invalid OAuth2 token.  </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The requested resource was not found.  </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
     </table>
     */
    public void getApiV2MatchingRsvpMatchIdAccept(@javax.annotation.Nonnull UUID matchId) throws ApiException {
        getApiV2MatchingRsvpMatchIdAcceptWithHttpInfo(matchId);
    }

    /**
     * Accept invitation to a given match
     * Accept invitation to a given match
     * @param matchId UUID associated with a given match (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Authentication failed due to missing or invalid OAuth2 token.  </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The requested resource was not found.  </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> getApiV2MatchingRsvpMatchIdAcceptWithHttpInfo(@javax.annotation.Nonnull UUID matchId) throws ApiException {
        okhttp3.Call localVarCall = getApiV2MatchingRsvpMatchIdAcceptValidateBeforeCall(matchId, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Accept invitation to a given match (asynchronously)
     * Accept invitation to a given match
     * @param matchId UUID associated with a given match (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Authentication failed due to missing or invalid OAuth2 token.  </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The requested resource was not found.  </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getApiV2MatchingRsvpMatchIdAcceptAsync(@javax.annotation.Nonnull UUID matchId, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = getApiV2MatchingRsvpMatchIdAcceptValidateBeforeCall(matchId, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for getApiV2MatchingRsvpMatchIdReject
     * @param matchId UUID associated with a given match (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Authentication failed due to missing or invalid OAuth2 token.  </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The requested resource was not found.  </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getApiV2MatchingRsvpMatchIdRejectCall(@javax.annotation.Nonnull UUID matchId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/v2/matching/rsvp/{match-id}/reject"
            .replace("{" + "match-id" + "}", localVarApiClient.escapeString(matchId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "auth0" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getApiV2MatchingRsvpMatchIdRejectValidateBeforeCall(@javax.annotation.Nonnull UUID matchId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'matchId' is set
        if (matchId == null) {
            throw new ApiException("Missing the required parameter 'matchId' when calling getApiV2MatchingRsvpMatchIdReject(Async)");
        }

        return getApiV2MatchingRsvpMatchIdRejectCall(matchId, _callback);

    }

    /**
     * Reject invitation to a given match
     * Reject invitation to a given match
     * @param matchId UUID associated with a given match (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Authentication failed due to missing or invalid OAuth2 token.  </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The requested resource was not found.  </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
     </table>
     */
    public void getApiV2MatchingRsvpMatchIdReject(@javax.annotation.Nonnull UUID matchId) throws ApiException {
        getApiV2MatchingRsvpMatchIdRejectWithHttpInfo(matchId);
    }

    /**
     * Reject invitation to a given match
     * Reject invitation to a given match
     * @param matchId UUID associated with a given match (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Authentication failed due to missing or invalid OAuth2 token.  </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The requested resource was not found.  </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> getApiV2MatchingRsvpMatchIdRejectWithHttpInfo(@javax.annotation.Nonnull UUID matchId) throws ApiException {
        okhttp3.Call localVarCall = getApiV2MatchingRsvpMatchIdRejectValidateBeforeCall(matchId, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Reject invitation to a given match (asynchronously)
     * Reject invitation to a given match
     * @param matchId UUID associated with a given match (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Authentication failed due to missing or invalid OAuth2 token.  </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The requested resource was not found.  </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getApiV2MatchingRsvpMatchIdRejectAsync(@javax.annotation.Nonnull UUID matchId, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = getApiV2MatchingRsvpMatchIdRejectValidateBeforeCall(matchId, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for postApiV2MatchingRequestSubmit
     * @param matchRequestNew  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Request submitted sucessfully </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> The request was malformed or contained invalid parameters.  </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Authentication failed due to missing or invalid OAuth2 token.  </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> Conflict </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call postApiV2MatchingRequestSubmitCall(@javax.annotation.Nullable MatchRequestNew matchRequestNew, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = matchRequestNew;

        // create path and map variables
        String localVarPath = "/api/v2/matching/request/submit";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "auth0" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call postApiV2MatchingRequestSubmitValidateBeforeCall(@javax.annotation.Nullable MatchRequestNew matchRequestNew, final ApiCallback _callback) throws ApiException {
        return postApiV2MatchingRequestSubmitCall(matchRequestNew, _callback);

    }

    /**
     * Submit matching Request
     * Submit a new matching request to the Matching-Service
     * @param matchRequestNew  (optional)
     * @return MatchRequest
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Request submitted sucessfully </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> The request was malformed or contained invalid parameters.  </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Authentication failed due to missing or invalid OAuth2 token.  </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> Conflict </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
     </table>
     */
    public MatchRequest postApiV2MatchingRequestSubmit(@javax.annotation.Nullable MatchRequestNew matchRequestNew) throws ApiException {
        ApiResponse<MatchRequest> localVarResp = postApiV2MatchingRequestSubmitWithHttpInfo(matchRequestNew);
        return localVarResp.getData();
    }

    /**
     * Submit matching Request
     * Submit a new matching request to the Matching-Service
     * @param matchRequestNew  (optional)
     * @return ApiResponse&lt;MatchRequest&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Request submitted sucessfully </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> The request was malformed or contained invalid parameters.  </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Authentication failed due to missing or invalid OAuth2 token.  </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> Conflict </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<MatchRequest> postApiV2MatchingRequestSubmitWithHttpInfo(@javax.annotation.Nullable MatchRequestNew matchRequestNew) throws ApiException {
        okhttp3.Call localVarCall = postApiV2MatchingRequestSubmitValidateBeforeCall(matchRequestNew, null);
        Type localVarReturnType = new TypeToken<MatchRequest>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Submit matching Request (asynchronously)
     * Submit a new matching request to the Matching-Service
     * @param matchRequestNew  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Request submitted sucessfully </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> The request was malformed or contained invalid parameters.  </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Authentication failed due to missing or invalid OAuth2 token.  </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> Conflict </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call postApiV2MatchingRequestSubmitAsync(@javax.annotation.Nullable MatchRequestNew matchRequestNew, final ApiCallback<MatchRequest> _callback) throws ApiException {

        okhttp3.Call localVarCall = postApiV2MatchingRequestSubmitValidateBeforeCall(matchRequestNew, _callback);
        Type localVarReturnType = new TypeToken<MatchRequest>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for putApiV2MatchingRequestRequestId
     * @param requestId UUID associated with a given match request (required)
     * @param matchRequestUpdate  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Ok </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> The request was malformed or contained invalid parameters.  </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Authentication failed due to missing or invalid OAuth2 token.  </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The requested resource was not found.  </td><td>  -  </td></tr>
        <tr><td> 406 </td><td> MatchRequest cannot be updated since it has already been fulfilled! </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call putApiV2MatchingRequestRequestIdCall(@javax.annotation.Nonnull UUID requestId, @javax.annotation.Nullable MatchRequestUpdate matchRequestUpdate, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = matchRequestUpdate;

        // create path and map variables
        String localVarPath = "/api/v2/matching/request/{request-id}"
            .replace("{" + "request-id" + "}", localVarApiClient.escapeString(requestId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "auth0" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call putApiV2MatchingRequestRequestIdValidateBeforeCall(@javax.annotation.Nonnull UUID requestId, @javax.annotation.Nullable MatchRequestUpdate matchRequestUpdate, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'requestId' is set
        if (requestId == null) {
            throw new ApiException("Missing the required parameter 'requestId' when calling putApiV2MatchingRequestRequestId(Async)");
        }

        return putApiV2MatchingRequestRequestIdCall(requestId, matchRequestUpdate, _callback);

    }

    /**
     * Update MatchRequest with {request-id}
     * Update all information in the MatchRequest with ID {request-id}
     * @param requestId UUID associated with a given match request (required)
     * @param matchRequestUpdate  (optional)
     * @return MatchRequest
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Ok </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> The request was malformed or contained invalid parameters.  </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Authentication failed due to missing or invalid OAuth2 token.  </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The requested resource was not found.  </td><td>  -  </td></tr>
        <tr><td> 406 </td><td> MatchRequest cannot be updated since it has already been fulfilled! </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
     </table>
     */
    public MatchRequest putApiV2MatchingRequestRequestId(@javax.annotation.Nonnull UUID requestId, @javax.annotation.Nullable MatchRequestUpdate matchRequestUpdate) throws ApiException {
        ApiResponse<MatchRequest> localVarResp = putApiV2MatchingRequestRequestIdWithHttpInfo(requestId, matchRequestUpdate);
        return localVarResp.getData();
    }

    /**
     * Update MatchRequest with {request-id}
     * Update all information in the MatchRequest with ID {request-id}
     * @param requestId UUID associated with a given match request (required)
     * @param matchRequestUpdate  (optional)
     * @return ApiResponse&lt;MatchRequest&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Ok </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> The request was malformed or contained invalid parameters.  </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Authentication failed due to missing or invalid OAuth2 token.  </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The requested resource was not found.  </td><td>  -  </td></tr>
        <tr><td> 406 </td><td> MatchRequest cannot be updated since it has already been fulfilled! </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<MatchRequest> putApiV2MatchingRequestRequestIdWithHttpInfo(@javax.annotation.Nonnull UUID requestId, @javax.annotation.Nullable MatchRequestUpdate matchRequestUpdate) throws ApiException {
        okhttp3.Call localVarCall = putApiV2MatchingRequestRequestIdValidateBeforeCall(requestId, matchRequestUpdate, null);
        Type localVarReturnType = new TypeToken<MatchRequest>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Update MatchRequest with {request-id} (asynchronously)
     * Update all information in the MatchRequest with ID {request-id}
     * @param requestId UUID associated with a given match request (required)
     * @param matchRequestUpdate  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Ok </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> The request was malformed or contained invalid parameters.  </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Authentication failed due to missing or invalid OAuth2 token.  </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The requested resource was not found.  </td><td>  -  </td></tr>
        <tr><td> 406 </td><td> MatchRequest cannot be updated since it has already been fulfilled! </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call putApiV2MatchingRequestRequestIdAsync(@javax.annotation.Nonnull UUID requestId, @javax.annotation.Nullable MatchRequestUpdate matchRequestUpdate, final ApiCallback<MatchRequest> _callback) throws ApiException {

        okhttp3.Call localVarCall = putApiV2MatchingRequestRequestIdValidateBeforeCall(requestId, matchRequestUpdate, _callback);
        Type localVarReturnType = new TypeToken<MatchRequest>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
