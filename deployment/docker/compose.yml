# This file is used to deploy the microservices using Docker Compose.
# It defines the services, their images, build context, and ports.

services:
  meetatmensa-gateway:
    build: ../../server/gateway
    container_name: meetatmensa-gateway
    ports:
      - "8080:8080"
    depends_on:
      - meetatmensa-matching
      - meetatmensa-user
      - meetatmensa-genai
    networks:
      - backend

  meetatmensa-matching:
    build: ../../server/matching
    container_name: meetatmensa-matching
    expose:
      - "80"
    depends_on:
      - match-database
    networks:
      - backend

  meetatmensa-user:
    build: ../../server/user
    container_name: meetatmensa-user
    expose:
      - "80"
    depends_on:
      - user-database
    networks:
      - backend

  meetatmensa-genai:
    build: ../../server/genai
    container_name: meetatmensa-genai
    expose:
      - "80"
    networks:
      - backend

  meetatmensa-client:
    build: 
      context: ../../client
    container_name: meetatmensa-client
    ports:
      - "80:80"
    environment:
      - API_BASE_URL=http://localhost:8080

  match-database:
    build: ../../server/database/matchdb
    container_name: meetatmensa-matchdb
    # TODO: Implement password passed via secret
    environment:
      - MYSQL_ROOT_PASSWORD=root
    volumes:
      - matchdb_data:/var/lib/mysql
    expose:
      - "3306"
    networks:
      - backend

  user-database:
    build: ../../server/database/userdb
    container_name: meetatmensa-userdb
    # TODO: Implement password passed via secret
    environment:
      - MYSQL_ROOT_PASSWORD=root
    volumes:
      - userdb_data:/var/lib/mysql
    expose:
      - "3306"
    networks:
      - backend

  prometheus:
    image: prom/prometheus:v2.52.0
    container_name: prometheus
    ports:
      - "9090:9090"
    volumes:
      - ../../prometheus:/etc/prometheus
      - prometheus_data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--web.enable-lifecycle'
    networks:
      - backend
    restart: unless-stopped

  grafana:
    image: grafana/grafana-oss:latest
    container_name: grafana
    ports:
      - "3001:3000"
    volumes:
      - grafana-storage:/var/lib/grafana
      - ../../grafana/provisioning:/etc/grafana/provisioning:ro
    environment:
      - GF_SECURITY_ADMIN_USER=admin
      - GF_SECURITY_ADMIN_PASSWORD=admin
      - GF_USERS_ALLOW_SIGN_UP=false
      - GF_FEATURE_TOGGLES_ENABLE=logsInExplore
      - GF_LOG_CONSOLECOLORS=true
    depends_on:
      - prometheus
      - loki
    networks:
      - backend
    restart: unless-stopped

  promtail:
    image: grafana/promtail:latest
    volumes:
      - /var/lib/docker/containers:/var/lib/docker/containers:ro
      - ../../promtail/promtail.yml:/etc/promtail/promtail.yml
    command: -config.file=/etc/promtail/promtail.yml
    depends_on:
      - loki
    networks:
      - backend
    restart: unless-stopped

  loki:
    image: grafana/loki:2.9.0
    ports:
      - "3100:3100"
    volumes:
      - ../../loki/loki-config.yaml:/etc/loki/loki-config.yaml:ro
    command: -config.file=/etc/loki/loki-config.yaml
    networks:
      - backend
    restart: unless-stopped

networks:
  backend:
    driver: bridge

volumes:
  matchdb_data:
  userdb_data:
  prometheus_data:
  grafana-storage:
  loki-data: