/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */

export interface paths {
    "/api/v2/user/{user-id}": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description UUID associated with a given user */
                "user-id": components["parameters"]["user-id"];
            };
            cookie?: never;
        };
        /**
         * Retrieve User with {user-id}
         * @description Fetch all information about user with ID {user-id} from user-service
         */
        get: operations["get-api-v2-user-userID"];
        /**
         * Update User with {user-id}
         * @description Update all information about user with ID {user-id} from user-service
         */
        put: operations["put-api-v2-user-userID"];
        post?: never;
        /**
         * Delete User with {user-id}
         * @description Remove all information about user with ID {user-id} from user-service
         */
        delete: operations["delete-api-v2-user-userID"];
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v2/user/register": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Register new User
         * @description Register a new user and respond with it's {user-id}
         */
        post: operations["post-api-v2-user-register"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v2/matching/request/submit": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Submit matching Request
         * @description Submit a new matching request to the Matching-Service
         */
        post: operations["post-api-v2-matching-request-submit"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v2/matching/matches/{user-id}": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description UUID associated with a given user */
                "user-id": components["parameters"]["user-id"];
            };
            cookie?: never;
        };
        /**
         * Retrieve all matches for a {user-id}
         * @description Retrieve all matches for a user with {user-id} from the matching-service
         */
        get: operations["get-api-v2-matching-matches-userID"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v2/matching/requests/{user-id}": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description UUID associated with a given user */
                "user-id": components["parameters"]["user-id"];
            };
            cookie?: never;
        };
        /**
         * Retrieve all MatchRequests for a {user-id}
         * @description Retrieve all MatchRequests for a user with {user-id} from the matching-service
         */
        get: operations["get-api-v2-matching-requests-userID"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v2/matching/request/{request-id}": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description UUID associated with a given match request */
                "request-id": components["parameters"]["request-id"];
            };
            cookie?: never;
        };
        get?: never;
        /**
         * Update MatchRequest with {request-id}
         * @description Update all information in the MatchRequest with ID {request-id}
         */
        put: operations["put-api-v2-matching-request-request-id"];
        post?: never;
        /**
         * Delete MatchRequest with {request-id}
         * @description Delete MatchRequest with ID {request-id} from the system
         */
        delete: operations["delete-api-v2-matching-request-request-id"];
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v2/matching/rsvp/{match-id}/accept": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description UUID associated with a given match */
                "match-id": string;
            };
            cookie?: never;
        };
        /**
         * Accept invitation to a given match
         * @description Accept invitation to a given match
         */
        get: operations["get-api-v2-matching-rsvp-match-id-accept"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v2/matching/rsvp/{match-id}/reject": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description UUID associated with a given match */
                "match-id": components["parameters"]["match-id"];
            };
            cookie?: never;
        };
        /**
         * Reject invitation to a given match
         * @description Reject invitation to a given match
         */
        get: operations["get-api-v2-matching-rsvp-match-id-reject"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v2/genai/conversation-starter": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Request conversation starter
         * @description Request a series of conversation starter prompts from the GenAI microservice. Provide infomation about users on request.
         */
        get: operations["get-api-v2-genai-conversation-starter"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v2/user/me/{auth-id}": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description User's Auth0 sub ID */
                "auth-id": components["parameters"]["auth-id"];
            };
            cookie?: never;
        };
        /**
         * Retrieve User based on AuthID
         * @description Retrieve a user object based on an Auth0 sub ID
         */
        get: operations["get-api-v2-user-me-auth-id"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
}
export type webhooks = Record<string, never>;
export interface components {
    schemas: {
        /**
         * ConversationStarter
         * @description Object representing a conversation starter in the meet@mensa system
         */
        ConversationStarter: {
            prompt: string;
        };
        /**
         * ConversationStarterCollection
         * @description Object representing a collection of conversation starters in the Meet@Mensa system.
         */
        ConversationStarterCollection: {
            conversationsStarters: components["schemas"]["ConversationStarter"][];
        };
        /**
         * Group
         * @description Object representing a group that has been matched in the Meet@Mensa system.
         */
        Group: {
            groupID: components["schemas"]["groupID"];
            /**
             * Format: date
             * @description Date the group is scheduled to meet at
             */
            date: string;
            /** @description Timeslot the group is scheduled to meet at */
            time: components["schemas"]["timeslot"];
            location: components["schemas"]["location"];
            userStatus: components["schemas"]["MatchStatus"][];
            conversationStarters: components["schemas"]["ConversationStarterCollection"];
        };
        /**
         * groupID
         * Format: uuid
         * @description The unique ID of a Group in the Meet@Mensa system.
         */
        groupID: string;
        /**
         * interest
         * @description String representing an interest a user has
         */
        interest: string;
        /**
         * inviteStatus
         * @description Enumerator representing the status of a Invitation
         *     | Value | Description |
         *     ---------|----------|
         *     | UNSENT | The system has not sent out this invitation yet |
         *     | SENT | The system has sent out this invitation |
         *     | CONFIRMED | The user has confirmed this invitation |
         *     | REJECTED | The user has rejected this invitation |
         *     | EXPIRED | The date for this invitation is in the past |
         * @enum {unknown}
         */
        inviteStatus: "UNSENT" | "SENT" | "CONFIRMED" | "REJECTED" | "EXPIRED";
        /**
         * location
         * @description Enumerator representing a mensa at which a meet can happen
         *
         *     | Value | Description |
         *     ---------|----------|
         *     | GARCHING | The Mensa at the TUM Garching Campus |
         *     | ARCISSTR | The Mensa at the TUM Innenstadt Campus (Arcisstr. 21) |
         *
         * @enum {unknown}
         */
        location: "GARCHING" | "ARCISSTR";
        /**
         * Match
         * @description Object representing a single match for a given user on a given date in the Meet@Mensa system.
         */
        Match: {
            matchID: components["schemas"]["matchID"];
            userID: components["schemas"]["userID"];
            status: components["schemas"]["inviteStatus"];
            group: components["schemas"]["Group"];
        };
        /**
         * MatchCollection
         * @description Object representing a collection of matches in the Meet@Mensa system.
         */
        MatchCollection: {
            matches: components["schemas"]["Match"][];
        };
        /**
         * matchID
         * Format: uuid
         * @description The unique ID of a Group in the Meet@Mensa system.
         */
        matchID: string;
        /**
         * MatchPreferences
         * @description Object Representing a set of user preferences
         */
        MatchPreferences: {
            /** @description Value | Meaning
             *     ---------|---------
             *     true | degree = same (priority)
             *     false | degree = any (no priority) */
            degreePref: boolean;
            /** @description Value | Meaning
             *     ---------|---------
             *     true | age = same (priority)
             *     false | age = any (no priority) */
            agePref: boolean;
            /** @description Value | Meaning
             *     ---------|---------
             *     true | gender = same (priority)
             *     false | gender = any (no priority) */
            genderPref: boolean;
        };
        /**
         * MatchRequest
         * @description Object representing a request for matching a given user on a given date in the Meet@Mensa system.
         */
        MatchRequest: {
            requestID: components["schemas"]["requestID"];
            userID: components["schemas"]["userID"];
            /**
             * Format: date
             * @description The date a user would like meet@mensa to find them a match
             */
            date: string;
            timeslot: components["schemas"]["timeslot"][];
            location: components["schemas"]["location"];
            preferences: components["schemas"]["MatchPreferences"];
            status: components["schemas"]["requestStatus"];
        };
        /**
         * MatchRequestCollection
         * @description Object representing a collection of match requests in the Meet@Mensa system.
         */
        MatchRequestCollection: {
            requests: components["schemas"]["MatchRequest"][];
        };
        /**
         * MatchRequestNew
         * @description Object representing a request for matching a given user on a given date in the Meet@Mensa system.
         */
        MatchRequestNew: {
            userID: components["schemas"]["userID"];
            /**
             * Format: date
             * @description The date a user would like meet@mensa to find them a match
             */
            date: string;
            timeslot: components["schemas"]["timeslot"][];
            location: components["schemas"]["location"];
            preferences: components["schemas"]["MatchPreferences"];
        };
        /**
         * MatchRequestUpdate
         * @description Object representing a request for matching a given user on a given date in the Meet@Mensa system.
         */
        MatchRequestUpdate: {
            /**
             * Format: date
             * @description The date a user would like meet@mensa to find them a match
             */
            date?: string;
            timeslot?: components["schemas"]["timeslot"][];
            location?: components["schemas"]["location"];
            preferences?: components["schemas"]["MatchPreferences"];
        };
        /** MatchStatus */
        MatchStatus: {
            userID: components["schemas"]["userID"];
            status: components["schemas"]["inviteStatus"];
        };
        /**
         * requestID
         * Format: uuid
         * @description The unique ID of a MatchRequest in the Meet@Mensa system.
         */
        requestID: string;
        /**
         * requestStatus
         * @description Enumerator representing the status of a MatchRequest
         *     | Value | Description |
         *     ---------|----------|
         *     | PENDING | The system has not attempted to match this request yet |
         *     | MATCHED | The system has fulfilled this request |
         *     | UNMATCHABLE | The system was unable to fulfill this request |
         *     | REMATCH | The sytem should attempt to fulfill this request again (ex: group cancelled for lacking RSVPs) |
         *     | EXPIRED | The date for this MatchRequest is in the past |
         *
         * @enum {unknown}
         */
        requestStatus: "PENDING" | "MATCHED" | "UNMATCHABLE" | "REMATCH" | "EXPIRED";
        /**
         * timeslot
         * @description What times a user is available to be matched
         *
         *     Value | Start Time | End Time
         *     ---------|----------|---------
         *     | 1     | 10:00      | 10:15    |
         *     | 2     | 10:15      | 10:30    |
         *     | 3     | 10:30      | 10:45    |
         *     | 4     | 10:45      | 11:00    |
         *     | 5     | 11:00      | 11:15    |
         *     | 6     | 11:15      | 11:30    |
         *     | 7     | 11:30      | 11:45    |
         *     | 8     | 11:45      | 12:00    |
         *     | 9     | 12:00      | 12:15    |
         *     | 10    | 12:15      | 12:30    |
         *     | 11    | 12:30      | 12:45    |
         *     | 12    | 12:45      | 13:00    |
         *     | 13    | 13:00      | 13:15    |
         *     | 14    | 13:15      | 13:30    |
         *     | 15    | 13:30      | 13:45    |
         *     | 16    | 13:45      | 14:00    |
         */
        timeslot: number;
        /**
         * User
         * @description Object representing a student user in the Meet@Mensa system.
         */
        User: {
            userID: components["schemas"]["userID"];
            /**
             * Format: email
             * @description Users's e-mail
             */
            email: string;
            /**
             * @description User's given name
             * @example Max
             */
            firstname: string;
            /**
             * @description User's surname
             * @example Mustermann
             */
            lastname: string;
            /**
             * Format: date
             * @description User's date of birth
             */
            birthday: string;
            /**
             * @description User's gender
             * @default other
             */
            gender: string;
            /**
             * @description User's degree program
             * @example msc_informatics
             */
            degree: string;
            /**
             * @description What year User started their degree
             * @example 2024
             */
            degreeStart: number;
            /** @description Array of a User's interests */
            interests: components["schemas"]["interest"][];
            /** @description Short introduction text written by the user */
            bio: string;
        };
        /**
         * UserCollection
         * @description Object representing a collection of student user in the Meet@Mensa system.
         */
        UserCollection: {
            users: components["schemas"]["User"][];
        };
        /**
         * UserNew
         * @description Object representing a student user in the Meet@Mensa system.
         */
        UserNew: {
            /** @description Auth0 user.sub, used as a unique key
             *      */
            authID: string;
            /**
             * Format: email
             * @description Users's e-mail
             */
            email: string;
            /**
             * @description User's given name
             * @example Max
             */
            firstname: string;
            /**
             * @description User's surname
             * @example Mustermann
             */
            lastname: string;
            /**
             * Format: date
             * @description User's date of birth
             */
            birthday: string;
            /**
             * @description User's gender
             * @default other
             */
            gender: string;
            /**
             * @description User's degree program
             * @example msc_informatics
             */
            degree: string;
            /**
             * @description What year User started their degree
             * @example 2024
             */
            degreeStart: number;
            /** @description Array of a User's interests */
            interests: components["schemas"]["interest"][];
            /** @description Short introduction text written by the user */
            bio: string;
        };
        /**
         * UserUpdate
         * @description Object representing a student user in the Meet@Mensa system.
         */
        UserUpdate: {
            /**
             * Format: email
             * @description Users's e-mail
             */
            email?: string;
            /**
             * @description User's given name
             * @example Max
             */
            firstname?: string;
            /**
             * @description User's surname
             * @example Mustermann
             */
            lastname?: string;
            /**
             * Format: date
             * @description User's date of birth
             */
            birthday?: string;
            /**
             * @description User's gender
             * @default other
             */
            gender: string;
            /**
             * @description User's degree program
             * @example msc_informatics
             */
            degree?: string;
            /**
             * @description What year User started their degree
             * @example 2024
             */
            degreeStart?: number;
            /** @description Array of a User's interests */
            interests?: components["schemas"]["interest"][];
            /** @description Short introduction text written by the user */
            bio?: string;
        };
        /**
         * userID
         * Format: uuid
         * @description The unique ID of a single student in the Meet@Mensa system.
         */
        userID: string;
    };
    responses: {
        /** @description Authentication failed due to missing or invalid OAuth2 token.
         *      */
        UnauthorizedError: {
            headers: {
                [name: string]: unknown;
            };
            content?: never;
        };
        /** @description The requested resource was not found.
         *      */
        NotFoundError: {
            headers: {
                [name: string]: unknown;
            };
            content?: never;
        };
        /** @description The request was malformed or contained invalid parameters.
         *      */
        BadRequestError: {
            headers: {
                [name: string]: unknown;
            };
            content?: never;
        };
    };
    parameters: {
        /** @description UUID associated with a given user */
        "user-id": string;
        /** @description UUID associated with a given match request */
        "request-id": string;
        /** @description UUID associated with a given match */
        "match-id": string;
        /** @description User's Auth0 sub ID */
        "auth-id": string;
    };
    requestBodies: never;
    headers: never;
    pathItems: never;
}
export type $defs = Record<string, never>;
export interface operations {
    "get-api-v2-user-userID": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description UUID associated with a given user */
                "user-id": components["parameters"]["user-id"];
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["User"];
                };
            };
            400: components["responses"]["BadRequestError"];
            401: components["responses"]["UnauthorizedError"];
            404: components["responses"]["NotFoundError"];
            /** @description Internal Server Error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    "put-api-v2-user-userID": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description UUID associated with a given user */
                "user-id": components["parameters"]["user-id"];
            };
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": components["schemas"]["UserUpdate"];
            };
        };
        responses: {
            /** @description User updated successfully */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["User"];
                };
            };
            400: components["responses"]["BadRequestError"];
            401: components["responses"]["UnauthorizedError"];
            404: components["responses"]["NotFoundError"];
            /** @description Server Error */
            "5XX": {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    "delete-api-v2-user-userID": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description UUID associated with a given user */
                "user-id": components["parameters"]["user-id"];
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description User deleted */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            400: components["responses"]["BadRequestError"];
            401: components["responses"]["BadRequestError"];
            404: components["responses"]["NotFoundError"];
            /** @description Internal Server Error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    "post-api-v2-user-register": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": components["schemas"]["UserNew"];
            };
        };
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["User"];
                };
            };
            400: components["responses"]["BadRequestError"];
            401: components["responses"]["UnauthorizedError"];
            /** @description Conflict */
            409: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Internal Server Error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    "post-api-v2-matching-request-submit": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": components["schemas"]["MatchRequestNew"];
            };
        };
        responses: {
            /** @description Request submitted sucessfully */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["MatchRequest"];
                };
            };
            400: components["responses"]["BadRequestError"];
            401: components["responses"]["UnauthorizedError"];
            /** @description Conflict */
            409: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Internal Server Error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    "get-api-v2-matching-matches-userID": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description UUID associated with a given user */
                "user-id": components["parameters"]["user-id"];
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["MatchCollection"];
                };
            };
            400: components["responses"]["BadRequestError"];
            401: components["responses"]["UnauthorizedError"];
            404: components["responses"]["NotFoundError"];
            /** @description Internal Server Error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    "get-api-v2-matching-requests-userID": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description UUID associated with a given user */
                "user-id": components["parameters"]["user-id"];
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["MatchRequestCollection"];
                };
            };
            400: components["responses"]["BadRequestError"];
            401: components["responses"]["UnauthorizedError"];
            404: components["responses"]["NotFoundError"];
            /** @description Internal Server Error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    "put-api-v2-matching-request-request-id": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description UUID associated with a given match request */
                "request-id": components["parameters"]["request-id"];
            };
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": components["schemas"]["MatchRequestUpdate"];
            };
        };
        responses: {
            /** @description Ok */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["MatchRequest"];
                };
            };
            400: components["responses"]["BadRequestError"];
            401: components["responses"]["UnauthorizedError"];
            404: components["responses"]["NotFoundError"];
            /** @description MatchRequest cannot be updated since it has already been fulfilled! */
            406: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Internal Server Error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    "delete-api-v2-matching-request-request-id": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description UUID associated with a given match request */
                "request-id": components["parameters"]["request-id"];
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Request Deleted */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            400: components["responses"]["BadRequestError"];
            401: components["responses"]["UnauthorizedError"];
            404: components["responses"]["NotFoundError"];
            /** @description Internal Server Error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    "get-api-v2-matching-rsvp-match-id-accept": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description UUID associated with a given match */
                "match-id": string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            401: components["responses"]["UnauthorizedError"];
            404: components["responses"]["NotFoundError"];
            /** @description Internal Server Error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    "get-api-v2-matching-rsvp-match-id-reject": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description UUID associated with a given match */
                "match-id": components["parameters"]["match-id"];
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            401: components["responses"]["UnauthorizedError"];
            404: components["responses"]["NotFoundError"];
            /** @description Internal Server Error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    "get-api-v2-genai-conversation-starter": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description Request Conversation starter for these users */
        requestBody?: {
            content: {
                "application/json": components["schemas"]["UserCollection"];
            };
        };
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ConversationStarterCollection"];
                };
            };
            400: components["responses"]["BadRequestError"];
            401: components["responses"]["UnauthorizedError"];
            404: components["responses"]["NotFoundError"];
            /** @description Internal Server Error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    "get-api-v2-user-me-auth-id": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description User's Auth0 sub ID */
                "auth-id": components["parameters"]["auth-id"];
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["User"];
                };
            };
            /** @description Bad Request */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Forbidden */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Not Found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
}
