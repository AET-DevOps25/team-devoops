openapi: 3.1.0
x-stoplight:
  id: ceylawji1yc2t
info:
  title: MeetAtMensa
  version: 1.0.0
  description: |-
    This OpenAPI specification defines the endpoints, schemas, and security mechanisms
    for the Meet@Mensa User micro-service. 
  contact:
    name: Team DevOops
    url: 'https://github.com/AET-DevOps25/team-devoops/'
    email: devoops@tyrean.mozmail.com
  termsOfService: ''
  license:
    name: MIT
    url: 'https://mit-license.org/'
servers:
  - url: 'https://meetatmensa.com'
    description: ''
components:
  securitySchemes:
    auth0:
      type: openIdConnect
      openIdConnectUrl: 'https://meetatmensa.eu.auth0.com/'
  responses:
    UnauthorizedError:
      description: |
        Authentication failed due to missing or invalid OAuth2 token.
    NotFoundError:
      description: |
        The requested resource was not found.
    BadRequestError:
      description: |
        The request was malformed or contained invalid parameters.
  parameters:
    user-id:
      name: user-id
      in: path
      required: true
      schema:
        type: string
        format: uuid
      description: UUID associated with a given user
    request-id:
      name: request-id
      in: path
      required: true
      schema:
        type: string
        format: uuid
      description: UUID associated with a given match request
    match-id:
      name: match-id
      in: path
      required: true
      schema:
        type: string
        format: uuid
      description: UUID associated with a given match
paths:
  '/api/v2/user/{user-id}':
    parameters:
      - $ref: '#/components/parameters/user-id'
    get:
      summary: 'Retrieve User with {user-id}'
      tags:
        - User
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: ./models/objects/User.yaml
        '400':
          $ref: '#/components/responses/BadRequestError'
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '404':
          $ref: '#/components/responses/NotFoundError'
      operationId: get-api-v2-user-userID
      x-stoplight:
        id: p1d67jb8y16q8
      description: 'Fetch all information about user with ID {user-id} from user-service'
      security:
        - auth0: []
    put:
      summary: 'Update User with {user-id}'
      tags:
        - User
      responses:
        '200':
          description: User updated successfully
          content:
            application/json:
              schema:
                $ref: ./models/objects/User.yaml
        '400':
          $ref: '#/components/responses/BadRequestError'
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '404':
          $ref: '#/components/responses/NotFoundError'
      operationId: put-api-v2-user-userID
      x-stoplight:
        id: exmvsbw8301bi
      requestBody:
        content:
          application/json:
            schema:
              $ref: ./models/masks/UpdateUser.yaml
      description: 'Update all information about user with ID {user-id} from user-service'
    delete:
      summary: 'Delete User with {user-id}'
      tags:
        - User
      responses:
        '200':
          description: User deleted
        '400':
          $ref: '#/components/responses/BadRequestError'
        '401':
          $ref: '#/components/responses/BadRequestError'
        '404':
          $ref: '#/components/responses/NotFoundError'
      operationId: delete-api-v2-user-userID
      x-stoplight:
        id: 407z5o4zq5tvl
      description: 'Remove all information about user with ID {user-id} from user-service'
  /api/v2/user/register:
    parameters: []
    post:
      summary: Register new User
      tags:
        - User
      responses:
        '201':
          description: Successfully created user
          content:
            application/json:
              schema:
                $ref: ./models/values/userID.yaml
        '400':
          $ref: '#/components/responses/BadRequestError'
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '409':
          description: Conflict
      operationId: post-api-v2-user-register
      x-stoplight:
        id: laufntfpxgg42
      requestBody:
        content:
          application/json:
            schema:
              $ref: ./models/masks/NewUser.yaml
        description: ''
      description: 'Register a new user and respond with it''s {user-id}'
  /api/v2/matching/request/submit:
    parameters: []
    post:
      summary: Submit matching Request
      tags:
        - Matching
      responses:
        '200':
          description: Request submitted sucessfully
        '400':
          $ref: '#/components/responses/BadRequestError'
        '401':
          $ref: '#/components/responses/UnauthorizedError'
      operationId: post-api-v2-matching-request
      x-stoplight:
        id: 1x5ta8qguutzq
      requestBody:
        content:
          application/json:
            schema:
              $ref: ./models/masks/NewMatchRequest.yaml
      description: Submit a new matching request to the Matching-Service
  '/api/v2/matching/matches/{user-id}':
    parameters:
      - $ref: '#/components/parameters/user-id'
    get:
      summary: 'Retrieve all matches for a {user-id}'
      x-stoplight:
        id: nxywx9cl1qg31
      tags:
        - Matching
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: ./models/collections/MatchCollection.yaml
        '400':
          $ref: '#/components/responses/BadRequestError'
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '404':
          $ref: '#/components/responses/NotFoundError'
      operationId: get-api-v2-matching-matches-userID
      description: 'Retrieve all matches for a user with {user-id} from the matching-service'
  '/api/v2/matching/requests/{user-id}':
    parameters:
      - $ref: '#/components/parameters/user-id'
    get:
      summary: 'Retrieve all MatchRequests for a {user-id}'
      tags:
        - Matching
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: ./models/collections/MatchRequestCollection.yaml
        '400':
          $ref: '#/components/responses/BadRequestError'
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '404':
          $ref: '#/components/responses/NotFoundError'
      operationId: get-api-v2-matching-requests-userID
      x-stoplight:
        id: wkc1ys6vkbv12
      description: 'Retrieve all MatchRequests for a user with {user-id} from the matching-service'
  '/api/v2/matching/request/{request-id}':
    parameters:
      - $ref: '#/components/parameters/request-id'
    delete:
      summary: 'Delete MatchRequest with {request-id}'
      tags:
        - Matching
      responses:
        '200':
          description: Request Deleted
        '400':
          $ref: '#/components/responses/BadRequestError'
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '404':
          $ref: '#/components/responses/NotFoundError'
      operationId: delete-api-v2-matching-matches-request-id
      x-stoplight:
        id: shgx14ydoaa2f
      description: 'Delete MatchRequest with ID {request-id} from the system'
    put:
      summary: 'Update MatchRequest with {request-id}'
      tags:
        - Matching
      responses:
        '200':
          description: MatchRequest cannot be updated since it has already been fulfilled!
          content:
            application/json:
              schema:
                $ref: ./models/objects/MatchRequest.yaml
        '400':
          $ref: '#/components/responses/BadRequestError'
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '404':
          $ref: '#/components/responses/NotFoundError'
        '406':
          description: Not Acceptable
      operationId: put-api-v2-matching-request-request-id
      x-stoplight:
        id: f6t3aeqcvup68
      requestBody:
        content:
          application/json:
            schema:
              $ref: ./models/masks/UpdateMatchRequest.yaml
      description: 'Update all information in the MatchRequest with ID {request-id}'
  '/api/v2/matching/rsvp/{match-id}/accept':
    get:
      summary: Accept invitation to a given match
      tags:
        - Matching
      responses:
        '200':
          description: OK
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '404':
          $ref: '#/components/responses/NotFoundError'
      operationId: get-api-v2-matching-rsvp-match-id-accept
      x-stoplight:
        id: am6b7xnyytanu
      description: Accept invitation to a given match
    parameters:
      - name: match-id
        in: path
        required: true
        schema:
          type: string
          format: uuid
        description: UUID associated with a given match
  '/api/v2/matching/rsvp/{match-id}/reject':
    get:
      summary: Reject invitation to a given match
      tags:
        - Matching
      responses:
        '200':
          description: OK
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '404':
          $ref: '#/components/responses/NotFoundError'
      operationId: get-api-v2-matching-rsvp-match-id-reject
      description: Reject invitation to a given match
      x-stoplight:
        id: swjozsxt7gvip
    parameters:
      - $ref: '#/components/parameters/match-id'
  /api/v2/genai/conversation-starter:
    get:
      summary: Request conversation starter
      x-stoplight:
        id: 2gb78xli5e55w
      tags:
        - GenAI
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  conversationStarters:
                    $ref: ./models/objects/ConversationStarter.yaml
                    x-stoplight:
                      id: lt5efiufixsnu
        '400':
          $ref: '#/components/responses/BadRequestError'
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '404':
          $ref: '#/components/responses/NotFoundError'
      operationId: get-api-v2-genai-conversation-starter
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                users:
                  type: array
                  x-stoplight:
                    id: kqrqaz6h0yzui
                  items:
                    $ref: ./models/objects/User.yaml
        description: Request Conversation starter for these users
      description: Request a series of conversation starter prompts from the GenAI microservice. Provide infomation about users on request.
    parameters: []
tags:
  - name: GenAI
    description: Paths belonging to the GenAI microservice
  - name: Matching
    description: Paths belonging to the Matching microservice
  - name: User
    description: Paths belonging to the User microservice
security:
  - auth0: []
